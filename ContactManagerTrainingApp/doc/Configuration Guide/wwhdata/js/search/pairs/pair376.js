function FileData_Pairs(x)
{
x.t("import/export","provided");
x.t("import/export","entities");
x.t("import/export","adding");
x.t("root","element");
x.t("uniquely","identifies");
x.t("example","configuring");
x.t("example","--");
x.t("example","case");
x.t("example","entityinfo");
x.t("example","class");
x.t("complex","scenario");
x.t("complex","deletion");
x.t("columns","exported");
x.t("columns","id");
x.t("columns","dependent");
x.t("columns","import");
x.t("columns","read-only");
x.t("columns","export");
x.t("exist","location");
x.t("classcode","header=");
x.t("exports","resolved");
x.t("exports","tax");
x.t("exports","display");
x.t("exports","territory");
x.t("exports","class");
x.t("exports","imports");
x.t("method","calculatecellvalue");
x.t("method","constructs");
x.t("possible","define");
x.t("construct","map");
x.t("construct","acolumninfo");
x.t("properties","entity");
x.t("creation","new");
x.t("type_strategy_map","map");
x.t("type_strategy_map","variable");
x.t("locked","columns");
x.t("locked","optional");
x.t("/dependent","/columninfo");
x.t("defines","whether");
x.t("defines","following");
x.t("pattern","coverage");
x.t("pattern","territorycodecolumndataresolver");
x.t("abstractcolumndataresolver","implement");
x.t("abstractcolumndataresolver","need");
x.t("abstractcolumndataresolver","taxlocation");
x.t("abstractcolumndataresolver","abstract");
x.t("prohibited","policycenter");
x.t("easy","determine");
x.t("building","step");
x.t("subdirectory","policycenter");
x.t("files","add");
x.t("files","give");
x.t("files","model");
x.t("exported","imported");
x.t("exported","name");
x.t("exported","first");
x.t("exported","spreadsheet");
x.t("exported","column");
x.t("within","parent");
x.t("within","location");
x.t("within","entityinfo");
x.t("full","path");
x.t("nothing","typically");
x.t("needs","exported");
x.t("needs","context");
x.t("implement","method");
x.t("implement","new");
x.t("implement","deleteentity");
x.t("gsrc","open");
x.t("gsrc","edit");
x.t("gsrc","define");
x.t("business","following");
x.t("business","buildings");
x.t("create","delete");
x.t("create","new");
x.t("create","xml");
x.t("create","import");
x.t("describes","columns");
x.t("describes","fields");
x.t("description","entitytypename");
x.t("description","columntype");
x.t("resolved","type");
x.t("studio","navigate");
x.t("sufficient","leverage");
x.t("deleting","building");
x.t("deleting","locations");
x.t("deleting","location");
x.t("static","final");
x.t("required","description");
x.t("required","element");
x.t("required","name");
x.t("required","display");
x.t("required","except");
x.t("key","id");
x.t("key","path");
x.t("key","name");
x.t("key","enables");
x.t("key","coveragecolumndataresolver");
x.t("key","string");
x.t("path=","classcode");
x.t("path=","cplocation.publicid");
x.t("path=","beanpathtocolumnvalue");
x.t("path=","cplocation.location.state");
x.t("path=","cplocation.location.locationname");
x.t("action","spreadsheet");
x.t("action","column");
x.t("responsible","importing");
x.t("cplocationflow.xml","cpbuildingflow.xml");
x.t("locked=","true");
x.t("statecolumn","/dependent");
x.t("statecolumn","requiredforimport=");
x.t("effdated",".branchuntyped");
x.t("taxlocationsearchcriteria","searchcriteria.code");
x.t("gw.exportimport.entityimport","name");
x.t("prohibiting","delete");
x.t("line","business");
x.t("locations","prohibited");
x.t("locations","add");
x.t("handled","provided");
x.t("handled","predefined");
x.t("uses","class");
x.t("uses","iterative");
x.t("implemented","abstractcolumndataresolver");
x.t("shows","implement");
x.t("text_val.select","link");
x.t("provided","commercial");
x.t("provided","column");
x.t("look","exported");
x.t("modified","locked");
x.t("/parent","/entityinfo");
x.t("state","statecolumn");
x.t("state","state");
x.t("state","==");
x.t("state","dependentdata");
x.t("state","information");
x.t("interface","responsible");
x.t("illustrated","bold");
x.t("register","new");
x.t("register","import");
x.t("parententitytypename","optional");
x.t("type","key");
x.t("type","designed");
x.t("type","name");
x.t("type","adjust");
x.t("type","cannot");
x.t("type","entityimportstrategy");
x.t("type","/code");
x.t("type","matches");
x.t("type","import");
x.t("type","type_resolver_map");
x.t("type","appropriate");
x.t("type","(class)");
x.t("type","following");
x.t("open","class");
x.t("gray","exported");
x.t("delete","entities");
x.t("delete","during");
x.t("cpbuildingimportstrategy","cplocation");
x.t("extend","class");
x.t("searchcriteria.state","statejurisdictionmappingutil.getjurisdictionmappingforstate");
x.t("entities","default");
x.t("entities","during");
x.t("entities","lines");
x.t("entities","function");
x.t("entities","prevent");
x.t("entities","adding");
x.t("entities","including");
x.t("guidewire","policycenter");
x.t("default","false");
x.t("default","string");
x.t("default","configuration");
x.t("property","line");
x.t("resolvers","implement");
x.t("resolvers","type");
x.t("resolvers","columndataresolver");
x.t("resolvers","define");
x.t("resolvers","step");
x.t("convert","string");
x.t("convert","value");
x.t("back","correct");
x.t("nullcolumndataresolver","imports");
x.t("needed","using");
x.t("link","directly");
x.t("new","studio");
x.t("new","taxlocationsearchcriteria");
x.t("new","type");
x.t("new","cpbuildingimportstrategy");
x.t("new","entities");
x.t("new","cplocationimportstrategy");
x.t("new","xml");
x.t("new","taxlocationcolumndataresolver");
x.t("new","import");
x.t("new","data");
x.t("new","column");
x.t("new","personalvehicleimportstrategy");
x.t("new","class");
x.t("new","object");
x.t("want","export");
x.t("element","within");
x.t("element","file");
x.t("element","add");
x.t("element","id");
x.t("element","contain");
x.t("element","specifies");
x.t("element","columninfo");
x.t("element","takes");
x.t("element","entity");
x.t("single","attribute");
x.t("celldata","celldata");
x.t("celldata","metadata");
x.t("==","null");
x.t("@link","entityimportstrategy");
x.t(".id","attribute");
x.t("designed","resolve");
x.t("calculatecellvalue","method");
x.t("calculatecellvalue","bean");
x.t("searchcriteria.effectiveondate","period.editeffectivedate");
x.t("messsage","policycenter");
x.t("file","describes");
x.t("file","create");
x.t("file","explained");
x.t("file","describing");
x.t("file","entityinfo");
x.t("file","entityname");
x.t("determines","order");
x.t("displaykeypath","id=");
x.t("need","export");
x.t("cplocation","new");
x.t("add","map");
x.t("add","collection");
x.t("add","parent");
x.t("add","policy");
x.t("add","following");
x.t("id","attribute");
x.t("id","columninfo");
x.t("id","optional");
x.t("id","column");
x.t("during","import");
x.t("tax","location");
x.t("guide","guidewire");
x.t("resolver","type");
x.t("resolver","edit");
x.t("resolver","step");
x.t("resolver","import");
x.t("resolver","class");
x.t("excludefromtemplate","optional");
x.t("simple","compared");
x.t("displaykey.import.validation.errors.missingdependentdatastate","var");
x.t("cplocationimportstrategy","personalvehicle");
x.t("cplocationimportstrategy","illustrates");
x.t("configuring","example");
x.t("configuring","complex");
x.t("configuring","new");
x.t("configuring","personalvehicle");
x.t("configuring","policy");
x.t("false","path=");
x.t("false","flagsentityid");
x.t("false","path");
x.t("false","attribute");
x.t("false","flagsaction");
x.t("false","parent");
x.t("false","return");
x.t("false","header");
x.t("false","header=");
x.t("false","flagsaction=");
x.t("false","flagsentityid=");
x.t("flagsentityid","optional");
x.t("requiredforimport","optional");
x.t("java.lang.string","/parent");
x.t("java.lang.string","columninfo");
x.t("depends","column");
x.t("informational","column");
x.t("reflection","resolve");
x.t("navigate","configuration");
x.t("company\u2019s","files");
x.t("cpbuildingimportstrategy.gs","illustrates");
x.t("cpbuildingimportstrategy.gs","models");
x.t("directly","page");
x.t("imported","exported");
x.t("imported","default");
x.t("imported","add");
x.t("imported","columndataresolver");
x.t("imported","spreadsheet");
x.t("imported","typically");
x.t("specified","within");
x.t("specified","spreadsheet");
x.t("true","action");
x.t("true","false");
x.t("true","dependent");
x.t("true","columntype=");
x.t("true","bean");
x.t("true","--");
x.t("processed","during");
x.t("requires","state");
x.t("personalvehicle","new");
x.t("personalvehicle","entity");
x.t("requirements","consider");
x.t("text_val.focus","text_val.select");
x.t("name","new");
x.t("name","file");
x.t("name","column\u2019s");
x.t("name","parent");
x.t("name","may");
x.t("name","identifier");
x.t("name","appropriate");
x.t("name","entity");
x.t("name","class");
x.t("creating","new");
x.t("creating","additional");
x.t("creating","buildings");
x.t("path","type");
x.t("path","resolve");
x.t("path","identifies");
x.t("path","accesses");
x.t("path","value");
x.t("path","optional");
x.t("path","contains");
x.t("shaded","gray");
x.t("searchcriteria","new");
x.t("operation","create");
x.t("operation","cpbuildingimportstrategy.gs");
x.t("no","easy");
x.t("column\u2019s","data");
x.t("enables","column");
x.t("coveragecolumndataresolver","exports");
x.t("edit","class");
x.t("edit","columndataresolverfactory");
x.t("excludefromtemplate=","true");
x.t("dependent","example");
x.t("dependent","columns");
x.t("dependent","element");
x.t("dependent","dependent");
x.t("dependent","data");
x.t("dependent","used");
x.t("dependent","elements");
x.t("dependent","purpose=");
x.t("dependent","child");
x.t("dependency","completed");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("entitytypename","required");
x.t("constructs","returns");
x.t("methods","needed");
x.t("illustrates","allow");
x.t("illustrates","somewhat");
x.t("find","taxlocation");
x.t("completed","using");
x.t("dependentdata","state");
x.t("dependentdata","map");
x.t("determine","location");
x.t("exclude","column");
x.t("writes","column");
x.t("map","type");
x.t("map","new");
x.t("map","@link");
x.t("map","dependent");
x.t("map","string");
x.t("map","parent\u2019s");
x.t("map","entity");
x.t("columndataresolver","needs");
x.t("columndataresolver","interface");
x.t("columndataresolver","class");
x.t("strings","numbers");
x.t("explained","dependent");
x.t("(celldata.data.notblank)","var");
x.t("final","implementation");
x.t("final","var");
x.t("lines","business");
x.t("fields","export");
x.t("adjust","columndataresolverfactory");
x.t("string","exported");
x.t("string","type");
x.t("string","back");
x.t("string","tax");
x.t("string","excludefromtemplate");
x.t("string","output");
x.t("string","export");
x.t("string","territory");
x.t("string","class");
x.t("string","imports");
x.t("string","object");
x.t("target","information");
x.t("jurisdiction","find");
x.t("examine","cplocationimportstrategy.gs");
x.t("allow","creation");
x.t("allow","deleting");
x.t("attribute","required");
x.t("attribute","true");
x.t("attribute","purpose");
x.t("attribute","--");
x.t("attribute","entityinfo");
x.t("defining","new");
x.t("defining","child");
x.t("contain","optional");
x.t("simplecolumndataresolver","exports");
x.t("coverage","pattern");
x.t("coverage","term");
x.t("cell","data");
x.t("deleteentity","createentity");
x.t("policycenter","defines");
x.t("policycenter","writes");
x.t("policycenter","allow");
x.t("policycenter","configuration");
x.t("policycenter","installation");
x.t("columntype=","java.lang.string");
x.t("columntype=","typekey.state");
x.t("columntype=","pathtypename");
x.t("columntype=","entity.cpclasscode");
x.t("/columninfo","step");
x.t("metadata","displaykey.import.validation.errors.missingdependentdatastate");
x.t("metadata","importmetadata");
x.t("metadata","displaykey.import.validation.errors.notaxlocationsfound");
x.t("lookups.gettaxlocation","(searchcriteria)");
x.t("createentity","methods");
x.t("error","occurred");
x.t("display","key");
x.t("display","keys");
x.t("display","value");
x.t("calculate","jurisdiction");
x.t("(state)","searchcriteria.effectiveondate");
x.t("cplocationimportstrategy.gs","cpbuildingimportstrategy.gs");
x.t("flagsaction","true");
x.t("flagsaction","optional");
x.t("give","class");
x.t("keyablebean","celldata");
x.t("period","bean");
x.t("(foundtaxlocations.empty)","createissue");
x.t("commercial","property");
x.t("arententityname","parententitycolumnpath=");
x.t("preceded","entity");
x.t("collection","columninfo");
x.t("columntype","optional");
x.t("select","new");
x.t("first","column");
x.t("headers","localized");
x.t("resolve","coverage");
x.t("resolve","dotted");
x.t("resolve","value");
x.t("resolve","typically");
x.t("somewhat","complex");
x.t("guidewire_selectall","var");
x.t("export.cpbuilding.locationid","locked=");
x.t("processing","strings");
x.t("territorycodecolumndataresolver","exports");
x.t("importing","exporting");
x.t("my_domain_name","exportimport.resolver");
x.t("my_domain_name","package");
x.t("cpbuilding","new");
x.t("function","calculatecellvalue");
x.t("function","guidewire_selectall");
x.t("parent","element");
x.t("parent","columninfo");
x.t("parent","entity");
x.t("export.action","policycenter");
x.t("parent\u2019s","columninfo");
x.t("cplocation.publicid","header=");
x.t("taxlocation","construct");
x.t("taxlocation","dependency");
x.t("taxlocation","var");
x.t("state.displayname","return");
x.t("define","new");
x.t("define","dependent");
x.t("define","column");
x.t("modules/configuration/config/resources/exportimport","subdirectory");
x.t("unique","id");
x.t("specifies","required");
x.t("specifies","action");
x.t("specifies","convert");
x.t("specifies","column");
x.t("cannot","handled");
x.t("cannot","modified");
x.t("whether","create");
x.t("whether","exclude");
x.t("whether","column");
x.t("may","already");
x.t("private","construct");
x.t("entityimportstrategy","cpbuilding");
x.t("entityimportstrategy","entity");
x.t("step","create");
x.t("step","register");
x.t("step","define");
x.t("step","modify");
x.t("row","column");
x.t("ignored","default");
x.t("scenario","deleting");
x.t("scenario","creating");
x.t("xml","files");
x.t("xml","file");
x.t("directory","cplocationflow.xml");
x.t("export.cpbuilding.locationname","columntype=");
x.t("types","typekeycolumndataresolver");
x.t("describing","columns");
x.t("columninfo","path=");
x.t("columninfo","illustrated");
x.t("columninfo","type");
x.t("columninfo","element");
x.t("columninfo","dependent");
x.t("columninfo","target");
x.t("columninfo","columntype=");
x.t("columninfo","specifies");
x.t("columninfo","elements");
x.t("columninfo","containing");
x.t("columninfo","child");
x.t("columninfo","super");
x.t("node","id");
x.t("purpose","key");
x.t("celldata.data","searchcriteria.state");
x.t("celldata.data","state.displayname");
x.t("/code","static");
x.t("steps","step");
x.t("entity.p","arententityname");
x.t("identifier","column");
x.t("code","shows");
x.t("code","type");
x.t("code","value");
x.t("identifies","unique");
x.t("identifies","entity");
x.t("term","pattern");
x.t("term","string");
x.t("term","value");
x.t("dotted","path");
x.t("dotted","bean");
x.t("abstract","class");
x.t("override","function");
x.t("return","null");
x.t("return","value");
x.t("return","values");
x.t("return","foundtaxlocations.first");
x.t("header","required");
x.t("header","ignored");
x.t("header","value");
x.t("header","using");
x.t("typekeycolumndataresolver","exports");
x.t("exportimport.resolver","my_domain_name");
x.t("matches","columninfo");
x.t("header=","displaykeypath");
x.t("header=","export.cpbuilding.locationid");
x.t("header=","export.cpbuilding.locationname");
x.t("header=","export.cpbuilding.state");
x.t("header=","export.cpbuilding.classcode");
x.t("quickly","look");
x.t("upon","columns");
x.t("bean","effdated");
x.t("bean","celldata");
x.t("bean","path");
x.t("bean","keyablebean");
x.t("accesses","column");
x.t("variable","declaration");
x.t("occurred","messsage");
x.t("columnname","locked=");
x.t("compared","types");
x.t("null","createissue");
x.t("null","update");
x.t("consider","prohibiting");
x.t("configuration","gsrc");
x.t("configuration","guide");
x.t("configuration","configuring");
x.t("configuration","policy");
x.t("exporting","cell");
x.t("exporting","template");
x.t("keys","export");
x.t("taxlocationcolumndataresolver","exports");
x.t("taxlocationcolumndataresolver","requires");
x.t("taxlocationcolumndataresolver","columndataresolver");
x.t("taxlocationcolumndataresolver","extends");
x.t("(acolumninfo)","override");
x.t("importmetadata","dependentdata");
x.t("displaykey.import.validation.errors.notaxlocationsfound","celldata.data");
x.t("gw.exportimport.entityimport.importstrategyregistry","type_strategy_map");
x.t("additional","entityinfo");
x.t("beanpathtocolumnvalue","requiredforimport=");
x.t("value","possible");
x.t("value","abstractcolumndataresolver");
x.t("value","needs");
x.t("value","action");
x.t("value","type");
x.t("value","specified");
x.t("value","string");
x.t("value","coverage");
x.t("value","cannot");
x.t("value","taxlocationcolumndataresolver");
x.t("value","classcodecolumndataresolver");
x.t("value","column");
x.t("value","allowcreate");
x.t("value","entity");
x.t("value","using");
x.t("named","processing");
x.t("foundtaxlocations","lookups.gettaxlocation");
x.t("reflect","entity");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("already","exist");
x.t("--","columninfo");
x.t("--","column");
x.t("typekey.state","id=");
x.t("searchcriteria.code","celldata.data");
x.t("implementation","step");
x.t("declaration","map");
x.t("import","create");
x.t("import","type");
x.t("import","operation");
x.t("import","examine");
x.t("import","policycenter");
x.t("import","strategy");
x.t("import","export");
x.t("import","strategies");
x.t("import","entity");
x.t("parententitytypename=","entity.p");
x.t("extends","abstractcolumndataresolver");
x.t("spreadsheet","import/export");
x.t("spreadsheet","default");
x.t("spreadsheet","imported");
x.t("spreadsheet","row");
x.t("spreadsheet","columninfo");
x.t("spreadsheet","order");
x.t("spreadsheet","attributes");
x.t("template","default");
x.t("/entityinfo","dependent");
x.t("takes","single");
x.t("type_resolver_map","step");
x.t("deletion","deleting");
x.t("deletion","requirements");
x.t("models","creating");
x.t("page","error");
x.t("output","column");
x.t("location","during");
x.t("location","no");
x.t("location","scenario");
x.t("location","quickly");
x.t("location","value");
x.t("context","resolve");
x.t("bold","example");
x.t("data","import/export");
x.t("data","resolvers");
x.t("data","resolver");
x.t("data","columninfo");
x.t("data","value");
x.t("data","spreadsheet");
x.t("data","values");
x.t("data","column");
x.t("data","export");
x.t("optional","full");
x.t("optional","required");
x.t("optional","path");
x.t("optional","name");
x.t("optional","map");
x.t("optional","parent");
x.t("optional","whether");
x.t("id=","statecolumn");
x.t("id=","columnname");
x.t("information","dependent");
x.t("information","calculate");
x.t("correct","value");
x.t("strategy","example");
x.t("strategy","defines");
x.t("strategy","studio");
x.t("strategy","new");
x.t("importstrategyregistry","private");
x.t("importstrategyregistry","class");
x.t("save","modules/configuration/config/resources/exportimport");
x.t("parententitycolumnpath=","entityname");
x.t("appropriate","open");
x.t("appropriate","type");
x.t("appropriate","default");
x.t("appropriate","column");
x.t("appropriate","entity");
x.t("read-only","shaded");
x.t("(class)","handled");
x.t("(class)","string");
x.t("classcodecolumndataresolver","exports");
x.t("policyperiod","(celldata.data.notblank)");
x.t("policy","data");
x.t("pathtypename","excludefromtemplate=");
x.t("export.cpbuilding.state","columntype=");
x.t("values","implemented");
x.t("values","appropriate");
x.t("case","taxlocationcolumndataresolver");
x.t("prevent","deletion");
x.t("entitytypename=","entity");
x.t("columndataresolvers","nullcolumndataresolver");
x.t(".branchuntyped","policyperiod");
x.t("gw.exportimport.resolver.columndataresolverfactory","map");
x.t("export","convert");
x.t("export","name");
x.t("export","step");
x.t("export","node");
x.t("export","import");
x.t("export","entity");
x.t("export","operations");
x.t("column","uniquely");
x.t("column","exported");
x.t("column","type");
x.t("column","resolvers");
x.t("column","resolver");
x.t("column","depends");
x.t("column","informational");
x.t("column","processed");
x.t("column","dependent");
x.t("column","attribute");
x.t("column","display");
x.t("column","headers");
x.t("column","parent");
x.t("column","export.action");
x.t("column","specifies");
x.t("column","header");
x.t("column","upon");
x.t("column","exporting");
x.t("column","value");
x.t("column","--");
x.t("column","spreadsheet");
x.t("column","data");
x.t("column","typically");
x.t("column","containing");
x.t("predefined","data");
x.t("cplocation.location.state","header=");
x.t("personalvehicleimportstrategy","implement");
x.t("flow.xml","save");
x.t("typically","exported");
x.t("typically","sufficient");
x.t("typically","extend");
x.t("typically","used");
x.t("localized","coverage");
x.t("localized","specify");
x.t("leverage","abstractcolumndataresolver");
x.t("allowcreate","allowdelete");
x.t("strategies","register");
x.t("strategies","cplocationimportstrategy");
x.t("cpbuildingflow.xml","files");
x.t("order","columns");
x.t("order","columninfo");
x.t("flagsaction=","true");
x.t("numbers","simple");
x.t("numbers","named");
x.t("territory","code");
x.t("package","company\u2019s");
x.t("following","root");
x.t("following","steps");
x.t("following","code");
x.t("following","columndataresolvers");
x.t("entity","exported");
x.t("entity","parententitytypename");
x.t("entity","default");
x.t("entity","want");
x.t("entity","requiredforimport");
x.t("entity","configuring");
x.t("entity","imported");
x.t("entity","specified");
x.t("entity","name");
x.t("entity","defining");
x.t("entity","display");
x.t("entity","preceded");
x.t("entity","parent");
x.t("entity","code");
x.t("entity","import");
x.t("entity","entityname");
x.t("entity","parententitycolumnpath");
x.t("entity","specify");
x.t("model","creating");
x.t("entityinfo","element");
x.t("entityinfo","parent");
x.t("entityinfo","xml");
x.t("entityinfo","entitytypename=");
x.t("elements","example");
x.t("elements","locked");
x.t("elements","uses");
x.t("elements","determines");
x.t("elements","specifies");
x.t("elements","columninfo");
x.t("except","flagsaction");
x.t("except","header");
x.t("used","action");
x.t("used","columninfo");
x.t("class","studio");
x.t("class","gw.exportimport.entityimport");
x.t("class","uses");
x.t("class","new");
x.t("class","name");
x.t("class","final");
x.t("class","defining");
x.t("class","select");
x.t("class","my_domain_name");
x.t("class","specifies");
x.t("class","step");
x.t("class","code");
x.t("class","taxlocationcolumndataresolver");
x.t("class","gw.exportimport.entityimport.importstrategyregistry");
x.t("class","reflect");
x.t("class","appropriate");
x.t("class","importstrategyregistry");
x.t("class","gw.exportimport.resolver.columndataresolverfactory");
x.t("class","personalvehicleimportstrategy");
x.t("class","class");
x.t("installation","directory");
x.t("using","dependent");
x.t("using","display");
x.t("using","dotted");
x.t("using","return");
x.t("containing","columninfo");
x.t("(searchcriteria)","(foundtaxlocations.empty)");
x.t("adding","spreadsheet");
x.t("entity.cpclasscode","requiredforimport=");
x.t("purpose=","state");
x.t("returns","new");
x.t("statejurisdictionmappingutil.getjurisdictionmappingforstate","(state)");
x.t("foundtaxlocations.first","return");
x.t("modify","importstrategyregistry");
x.t("child","elements");
x.t("child","entity");
x.t("flagsentityid=","true");
x.t("requiredforimport=","true");
x.t("export.cpbuilding.classcode","columntype=");
x.t("operations","simplecolumndataresolver");
x.t("var","type_strategy_map");
x.t("var","state");
x.t("var","searchcriteria");
x.t("var","text_val=eval");
x.t("var","period");
x.t("var","foundtaxlocations");
x.t("buildings","within");
x.t("buildings","locations");
x.t("including","entities");
x.t("iterative","reflection");
x.t("createissue","bean");
x.t("entityname",".id");
x.t("entityname","parententitytypename=");
x.t("entityname","flow.xml");
x.t("parententitycolumnpath","optional");
x.t("columndataresolverfactory","class");
x.t("imports","nothing");
x.t("imports","strings");
x.t("imports","string");
x.t("imports","localized");
x.t("period.editeffectivedate","var");
x.t("allowdelete","properties");
x.t("attributes","except");
x.t("contains","string");
x.t("specify","true");
x.t("specify","header");
x.t("cplocation.location.locationname","header=");
x.t("object","type");
x.t("object","taxlocation");
x.t("acolumninfo","columninfo");
x.t("super","(acolumninfo)");
x.t("update","columndataresolverfactory");
}
