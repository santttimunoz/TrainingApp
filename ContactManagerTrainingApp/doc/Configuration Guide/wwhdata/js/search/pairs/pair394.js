function FileData_Pairs(x)
{
x.t("uniquely","identifies");
x.t("example","gw.rating.rtm.matchop.statelesslessthanorequalmatch");
x.t("example","filter");
x.t("example","range");
x.t("example","define");
x.t("example","exact");
x.t("example","exactmatchopfactory");
x.t("example","gw.rating.rtm.matchop.lessthanorequalmatchopfactory.gs");
x.t("example","validator");
x.t("(entity.ratetablematchop)","extends");
x.t("active","corresponding");
x.t("equal","values");
x.t("passed","above");
x.t("parameter","matching");
x.t("parameter","inputs");
x.t("method","method");
x.t("method","create");
x.t("method","creates");
x.t("method","needed");
x.t("method","signature");
x.t("method","comparerowvalues");
x.t("method","match");
x.t("method","computes");
x.t("method","mainly");
x.t("provide","implementations");
x.t("columns","region");
x.t("columns","match");
x.t("formatted","next");
x.t("easy","override");
x.t("implement","least");
x.t("implement","following");
x.t("implement","validator");
x.t("meet","requirement");
x.t("needs","reorder");
x.t("reorder","rows");
x.t("table","definition");
x.t("table","first");
x.t("table","define");
x.t("table","row");
x.t("table","sorted");
x.t("table","ratetablematchopdefinition");
x.t("table","application");
x.t("table","specify");
x.t("table","matching");
x.t("create","custom");
x.t("create","return");
x.t("create","following");
x.t("create","class");
x.t("static","method");
x.t("clicks","add");
x.t("instance","part");
x.t("instance","ratetablematchop");
x.t("instance","match");
x.t("doing","in-memory");
x.t("always","returns");
x.t("user","clicks");
x.t("creates","stateless");
x.t("creates","validator");
x.t("rangematchopmaxinclvalidator","class");
x.t("field","fields");
x.t("pair","method");
x.t("regards","method");
x.t("text_val.select","link");
x.t("evaluates","row");
x.t("evaluates","rows");
x.t("best","match");
x.t("satisfy","conditions");
x.t("gw.rating.rtm.validation","package");
x.t("rate","table");
x.t("rate","factor");
x.t("relax","method");
x.t("relax","input");
x.t("ascending","order");
x.t("form","input");
x.t("identify","overlaps");
x.t("guidewire","policycenter");
x.t("default","match");
x.t("product","designer");
x.t("needed","list");
x.t("assumes","rows");
x.t("requirement","policycenter");
x.t("property","needssubrangemerge");
x.t("constraint","database");
x.t("entities","ratefactorrow");
x.t("validates","parameter");
x.t("validates","two");
x.t("require","custom");
x.t("checks","two");
x.t("link","directly");
x.t("new","instance");
x.t("new","custom");
x.t("new","match");
x.t("new","classes");
x.t("signature","function");
x.t("comparable","comparable");
x.t("comparable","list");
x.t("comparable","boolean");
x.t("comparable","int");
x.t("comparable","relation");
x.t("comparable","used");
x.t("comparable","object");
x.t("choice","user");
x.t("messsage","policycenter");
x.t("list","comparable");
x.t("list","results");
x.t("list","properly");
x.t("list","two");
x.t("list","orderedpersistenceadapter");
x.t("add","entry");
x.t("add","parameters");
x.t("during","rate");
x.t("guide","guidewire");
x.t("guide","configuring");
x.t("guide","stateless");
x.t("entry","system");
x.t("createvalidator",":matchopvalidator");
x.t("gw.rating.rtm.matchop.statelesslessthanorequalmatch","match");
x.t("filter","method");
x.t("filter","evaluates");
x.t("filter","relax");
x.t("filter","list");
x.t("filter","adds");
x.t("filter","query");
x.t("filter","called");
x.t("results","fully");
x.t("results","filtered");
x.t("according","field");
x.t("according","whether");
x.t("according","increasing");
x.t("validate","method");
x.t("validate","pair");
x.t("validate","list");
x.t("configuring","new");
x.t("configuring","rating");
x.t("configuring","matching");
x.t("navigate","rtm_matchop_defs.xml");
x.t("accepts","list");
x.t("accepts","value");
x.t("accepts","following");
x.t("false","validate");
x.t("directly","page");
x.t("region","equal");
x.t("true","sets");
x.t("true","step");
x.t("true","values");
x.t("true","statelesslessthanorequalmatch");
x.t("text_val.focus","text_val.select");
x.t("operation","active");
x.t("operation","example");
x.t("operation","meet");
x.t("operation","implement");
x.t("operation","doing");
x.t("operation","product");
x.t("operation","assumes");
x.t("operation","require");
x.t("operation","choice");
x.t("operation","list");
x.t("operation","filter");
x.t("operation","accepts");
x.t("operation","range");
x.t("operation","opname");
x.t("operation","matches");
x.t("operation","sorted");
x.t("operation","factory");
x.t("operation","implementation");
x.t("operation","configure");
x.t("operation","controls");
x.t("operation","naturally");
x.t("operation","class");
x.t("operation","therefore");
x.t("operation","validator");
x.t("operation","matching");
x.t("definition","new");
x.t("definition","editor");
x.t("name","new");
x.t("name","getfactorybyname");
x.t("range","match");
x.t("correctly-ordered","output");
x.t("creating","matchoperationfactory");
x.t("conflicts","example");
x.t("no","overlap");
x.t("constructor","accepts");
x.t("custom","match");
x.t("custom","entity");
x.t("custom","validator");
x.t("base","class");
x.t("argument","instance");
x.t("argument","comparable");
x.t("part","rate");
x.t("part","filtering");
x.t("rule","parameter");
x.t("rule","match");
x.t("rule","operations");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("none","default");
x.t("parameters","implclass");
x.t("parameters","tab");
x.t("implclass","fully");
x.t("provides","example");
x.t("provides","static");
x.t("(string)","create");
x.t("methods","method");
x.t("methods","filter");
x.t("methods","validate");
x.t("methods","base");
x.t("ratetablematchop","entity");
x.t("boolean","validates");
x.t("boolean",":list");
x.t("boolean","returns");
x.t("filtering","expects");
x.t("filtering","process");
x.t("int1","value");
x.t("int1","(minimum)");
x.t("createstatelessmatchoperator","(entity.ratetablematchop)");
x.t("implementations","methods");
x.t("stay","upon");
x.t("int2","maximum");
x.t("int2","values");
x.t("loaded","using");
x.t("overriding","method");
x.t("determine","best");
x.t("matched","next");
x.t("matched","match");
x.t("fields","int1");
x.t("fields","matched");
x.t("int","match");
x.t("ratefactorrow","coverageratefactor");
x.t("sets","valid");
x.t("sets","values");
x.t("input","needs");
x.t("input","ascending");
x.t("input","results");
x.t("input","argument");
x.t("second","match");
x.t("second","value");
x.t("policycenter","match");
x.t("policycenter","configuration");
x.t("policycenter","sorts");
x.t("rating","management");
x.t("designer","navigate");
x.t("in-memory","filter");
x.t("in-memory","filtering");
x.t("operation\u2019s","columns");
x.t("functions","represent");
x.t("error","occurred");
x.t("respect","field");
x.t("point","view");
x.t("next","match");
x.t("comparerowvalues","comparable");
x.t("keyablebean","comparable");
x.t("coverageratefactor","custom");
x.t("opname","appears");
x.t("appears","policycenter");
x.t("getfactorybyname","(string)");
x.t("first","loaded");
x.t("first","match");
x.t("first","value");
x.t("adjusted","query");
x.t("guidewire_selectall","var");
x.t("number","parameters");
x.t("function","checks");
x.t("function","createvalidator");
x.t("function","filter");
x.t("function","validate");
x.t("function","createstatelessmatchoperator");
x.t("function","guidewire_selectall");
x.t("function","validatepair");
x.t("function","getscore");
x.t("matchoperationfactory","new");
x.t("matchoperationfactory","abstract");
x.t("maximum","operation");
x.t("relation","rate");
x.t("define","class");
x.t("define","matching");
x.t("editor","screen");
x.t("whether","row");
x.t("against","returns");
x.t("matchopfactory","create");
x.t("stateless","match");
x.t("row","match");
x.t("row","value");
x.t("row","consideration");
x.t("step","configuring");
x.t("match","filter");
x.t("match","accepts");
x.t("match","operation");
x.t("match","operation\u2019s");
x.t("match","match");
x.t("match","operations");
x.t("match","operator");
x.t("properly","formatted");
x.t("tie","broken");
x.t("needssubrangemerge","returns");
x.t("noopvalidator","creating");
x.t("code","uniquely");
x.t("rows","satisfy");
x.t("rows","part");
x.t("rows","ordered");
x.t("rows","consideration");
x.t("identifies","match");
x.t("fully","qualified");
x.t("fully","ordered");
x.t("abstract","base");
x.t("abstract","matchopvalidator");
x.t("abstract","gw.rating.rtm.matchop.statelessmatchoperator");
x.t("abstract","gw.rating.rtm.matchop.matchoperationfactory");
x.t("return","new");
x.t("return","false");
x.t("expects","input");
x.t("override","property");
x.t("adds","constraint");
x.t("least","following");
x.t("matches","fields");
x.t("broken","comparing");
x.t("sorted","second");
x.t("sorted","first");
x.t("database","query");
x.t("exact","match");
x.t("extending","match");
x.t(":list","orderedpersistenceadapter");
x.t("upon","output");
x.t("relaxing","matching");
x.t("sorting","rate");
x.t("occurred","messsage");
x.t("rules","application");
x.t("null","first");
x.t("less","second");
x.t("configuration","guide");
x.t("configuration","configuring");
x.t("qualified","name");
x.t("factory","name");
x.t("factory","implementation");
x.t("factory","class");
x.t("instances","passed");
x.t("ratetablematchopdefinition","add");
x.t("value","always");
x.t("value","conflicts");
x.t("value","tie");
x.t("value","null");
x.t("value","less");
x.t("value","otherwise");
x.t("value","orderedpersistenceadapter");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","method");
x.t("implementation","provide");
x.t("implementation","implement");
x.t("implementation","create");
x.t("implementation","constructor");
x.t("implementation","optionally");
x.t("implementation","class");
x.t("extends","abstract");
x.t("extends","statelessmatchoperator");
x.t("extends","gw.rating.rtm.validation.matchopvalidator");
x.t("extends","gw.rating.rtm.matchop.matchoperationfactory");
x.t("sorts","rate");
x.t("process","match");
x.t("view","match");
x.t("screen","numberofparameters");
x.t(":matchopvalidator","method");
x.t("represent","rate");
x.t("computes","score");
x.t("score","method");
x.t("score","input");
x.t("score","used");
x.t("valid","regards");
x.t("valid","point");
x.t("page","error");
x.t("output","ascending");
x.t("output","form");
x.t("output","stateless");
x.t("output","information");
x.t("(minimum)","int2");
x.t("by/then","sorting");
x.t("configure","new");
x.t("rtm_matchop_defs.xml","system");
x.t("opcode","matchopfactory");
x.t("opcode","code");
x.t("numberofparameters","number");
x.t("information","relaxing");
x.t("query","filter");
x.t("query","keyablebean");
x.t("query","entity");
x.t("query","returns");
x.t("defined","application");
x.t("appropriate","configure");
x.t("increasing","int1");
x.t("application","guide");
x.t("application","none");
x.t("gw.rating.rtm.matchop","opcode");
x.t("gw.rating.rtm.matchop","package");
x.t("comparing","int2");
x.t("values","first");
x.t("values","against");
x.t("values","valid");
x.t("values","output");
x.t("values","either");
x.t("statelessmatchoperator","method");
x.t("described","match");
x.t("called","match");
x.t("ordered","according");
x.t("ordered","stay");
x.t("ordered","overriding");
x.t("above","functions");
x.t("exactmatchopfactory","gw.rating.rtm.matchop");
x.t("classes","factory");
x.t("two","methods");
x.t("two","sets");
x.t("two","values");
x.t("two","numeric");
x.t("consideration","filter");
x.t("consideration","returns");
x.t("matchopvalidator","gw.rating.rtm.validation");
x.t("note","match");
x.t("otherwise","return");
x.t("date","ranges");
x.t("gw.rating.rtm.matchop.statelessmatchoperator","example");
x.t("gw.rating.rtm.matchop.statelessmatchoperator","match");
x.t("optionally","create");
x.t("factor","rate");
x.t("factor","entities");
x.t("numeric","date");
x.t("order","according");
x.t("order","respect");
x.t("order","by/then");
x.t("controls","rows");
x.t("naturally","produce");
x.t("statelesslessthanorequalmatch","provides");
x.t("package","example");
x.t("package","new");
x.t("package","note");
x.t("management","configuring");
x.t("system","table");
x.t("following","new");
x.t("following","argument");
x.t("following","methods");
x.t("following","opcode");
x.t("following","two");
x.t("gw.rating.rtm.matchop.lessthanorequalmatchopfactory.gs","new");
x.t("entity","method");
x.t("entity","instance");
x.t("entity","instances");
x.t("corresponding","relax");
x.t("used","identify");
x.t("used","during");
x.t("used","compute");
x.t("compute","score");
x.t("either","value");
x.t("class","example");
x.t("class","gw.rating.rtm.validation");
x.t("class","provides");
x.t("class","matchoperationfactory");
x.t("class","match");
x.t("class","extends");
x.t("class","gw.rating.rtm.matchop");
x.t("class","described");
x.t("class","class");
x.t("class","including");
x.t("using","order");
x.t("validatepair","list");
x.t("mainly","used");
x.t("tab","rate");
x.t("gw.rating.rtm.validation.matchopvalidator","match");
x.t("returns","true");
x.t("returns","adjusted");
x.t("returns","rows");
x.t("operations","easy");
x.t("operations","rate");
x.t("operations","configuring");
x.t("operations","function");
x.t("operations","defined");
x.t("operations","appropriate");
x.t("gw.rating.rtm.matchop.matchoperationfactory","example");
x.t("gw.rating.rtm.matchop.matchoperationfactory","ee");
x.t("operator","method");
x.t("therefore","output");
x.t("getscore","orderedpersistenceadapter");
x.t("overlaps","value");
x.t("ranges","no");
x.t("var","text_val=eval");
x.t("including","following");
x.t("ee","extending");
x.t("validator","method");
x.t("validator","implement");
x.t("validator","create");
x.t("validator","rangematchopmaxinclvalidator");
x.t("validator","validates");
x.t("validator","function");
x.t("validator","match");
x.t("validator","noopvalidator");
x.t("validator","extending");
x.t("validator","class");
x.t("conditions","match");
x.t("produce","correctly-ordered");
x.t("matching","rule");
x.t("matching","determine");
x.t("matching","rules");
x.t("matching","factor");
x.t("specify","following");
x.t("orderedpersistenceadapter","comparable");
x.t("orderedpersistenceadapter","in-memory");
x.t("orderedpersistenceadapter","score");
x.t("filtered","pre-partitioned");
x.t("pre-partitioned","according");
x.t("object","adds");
x.t("inputs","match");
}
