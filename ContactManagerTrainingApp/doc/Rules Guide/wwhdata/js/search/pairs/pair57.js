function FileData_Pairs(x)
{
x.t("speak","foreign");
x.t("speak","french");
x.t("states","search");
x.t("differently","depending");
x.t("example","impose");
x.t("example","searches");
x.t("example","boolean");
x.t("example","suppose");
x.t("example","assigns");
x.t("root","group");
x.t("method","method");
x.t("method","performs");
x.t("method","bases");
x.t("method","situations");
x.t("method","uses");
x.t("method","tightens");
x.t("method","finds");
x.t("method","assign");
x.t("method","selects");
x.t("method","maintain");
x.t("method","assignuserbylocationandattributes");
x.t("method","attempts");
x.t("method","ands");
x.t("method","combination");
x.t("method","reference");
x.t("method","assigns");
x.t("method","matches");
x.t("method","imposes");
x.t("method","assignbyuserattributes");
x.t("method","restricts");
x.t("method","maintains");
x.t("method","assignuserbylocation");
x.t("parameter","possible");
x.t("parameter","null");
x.t("parameter","two");
x.t("possible","need");
x.t("exist","members");
x.t("exist","across");
x.t("indicated","type");
x.t("indicated","group");
x.t("indicated","value");
x.t("pattern","criteria");
x.t("rather","exist");
x.t("rather","specific");
x.t("restriction","imposed");
x.t("restriction","based");
x.t("restriction","using");
x.t("restriction","attributes");
x.t("simultaneously","similar");
x.t("within","single");
x.t("within","group");
x.t("needs","location");
x.t("description","userfield");
x.t("preferable","partially");
x.t("always","re-uses");
x.t("always","result");
x.t("user's","first");
x.t("having","appropriate");
x.t("userattributetype.tc_language","frenchspeaker.attributevalue");
x.t("userattributetype.tc_language","frenchspeaker.attributefield");
x.t("kinds","restrictions");
x.t("impose","additional");
x.t("performs","round-robin");
x.t("few","match");
x.t("bases","state");
x.t("apply","kinds");
x.t("foreign","language");
x.t("user","having");
x.t("user","best");
x.t("user","entities");
x.t("user","determines");
x.t("user","attribute");
x.t("user","exact");
x.t("user","location");
x.t("user","otherwise");
x.t("user","based");
x.t("user","entity");
x.t("user","attributes");
x.t("assignmentengineutil.getcurrentgroupfromes","retrieve");
x.t("current","group");
x.t("zip","county");
x.t("situations","assignment");
x.t("sequences","even");
x.t("uses","parameter");
x.t("uses","user's");
x.t("uses","assignmentengineutil.getcurrentgroupfromes");
x.t("uses","location-based");
x.t("membership","user");
x.t("field","description");
x.t("field","find");
x.t("field","attribute");
x.t("field","null");
x.t("text_val.select","link");
x.t("state","method");
x.t("state","first");
x.t("state","persistence");
x.t("state","value");
x.t("state","assignuserbylocation");
x.t("maintained","policycenter");
x.t("best","group");
x.t("best","matches");
x.t("tightens","attributefield");
x.t("type","attributevalue");
x.t("non-null","assignment");
x.t("satisfy","words");
x.t("activity.currentassignment.assignbyuserattributes","attributebasedassignmentcriteria");
x.t("speaker","closest");
x.t("multiple","groups");
x.t("however","two");
x.t("sort","additional");
x.t("frenchspeaker.attributevalue","french");
x.t("attributebasedassignmentcriteria.addtoattributecriteria","frenchspeaker");
x.t("qualification","users");
x.t("entities","attributetype");
x.t("entities","represent");
x.t("entities","attributecriteriaelement");
x.t("property","user");
x.t("property","attribute");
x.t("property","contains");
x.t("default","root");
x.t("requirement","handle");
x.t("closest","given");
x.t("link","directly");
x.t("advanced","topics");
x.t("among","resulting");
x.t("distinct","round-robin");
x.t("single","group");
x.t("certain","groups");
x.t("new","attributebasedassignmentcriteria");
x.t("new","attributecriteriaelement");
x.t("condition-based","assignment");
x.t("satisfies","criteria");
x.t("amounts","speak");
x.t("messsage","policycenter");
x.t("need","assign");
x.t("policies","specific");
x.t("group-specific","assignment");
x.t("determines","best");
x.t("finds","no");
x.t("finds","appropriate");
x.t("attributebasedsearchcriteria","object");
x.t("fashion","assignuserbylocation");
x.t("assignment","method");
x.t("assignment","needs");
x.t("assignment","among");
x.t("assignment","condition-based");
x.t("assignment","specified");
x.t("assignment","methods");
x.t("assignment","policycenter");
x.t("assignment","function");
x.t("assignment","rotations");
x.t("assignment","span");
x.t("assignment","ignoring");
x.t("assignment","users");
x.t("assignment","load");
x.t("group","attributebasedsearchcriteria");
x.t("group","assignment");
x.t("group","assign");
x.t("group","boolean");
x.t("group","subgroups");
x.t("group","thus");
x.t("group","kind");
x.t("group","null");
x.t("group","default_data:1");
x.t("group","var");
x.t("assign","user");
x.t("assign","policies");
x.t("assign","assignable");
x.t("assignable","entity");
x.t("assignable","item");
x.t("organization","rather");
x.t("strict","based");
x.t("guide","advanced");
x.t("meaningful","within");
x.t("holder","example");
x.t("selects","user");
x.t("false","group");
x.t("false","gw.api.assignment.assignmentengineutil.getcurrentgroupfromes");
x.t("large","dollar");
x.t("directly","page");
x.t("constraints","defined");
x.t("attributefield","name");
x.t("attributefield","-based");
x.t("specified","value");
x.t("specified","location");
x.t("specified","attributevalue");
x.t("handle","large");
x.t("text_val.focus","text_val.select");
x.t("resulting","users");
x.t("maintain","group-specific");
x.t("name","frenchspeaker.attributevalue");
x.t("name","property");
x.t("wins","users");
x.t("no","users");
x.t("account","address");
x.t("account","associated");
x.t("french","speaker");
x.t("french","sort");
x.t("french","attributebasedassignmentcriteria.addtoattributecriteria");
x.t("french","notice");
x.t("searches","user");
x.t("searches","french");
x.t("assignuserbylocationandattributes","method");
x.t("assignuserbylocationandattributes","address");
x.t("perform","round-robin");
x.t("attributecriteria","array");
x.t("dependent","ways");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","apply");
x.t("methods","tie");
x.t("methods","follow");
x.t("methods","include");
x.t("methods","round-robin");
x.t("boolean","assignuserbylocationandattributes");
x.t("boolean","assignbyuserattributes");
x.t("boolean","assignuserbylocation");
x.t("parameters","further");
x.t("further","restrict");
x.t("find","qualifying");
x.t("find","users");
x.t("completed","location");
x.t("search","indicated");
x.t("search","restriction");
x.t("search","include");
x.t("search","users");
x.t("search","criteria");
x.t("attempts","assign");
x.t("address","boolean");
x.t("address","policy");
x.t("address","attributebasedassignmentcriteria");
x.t("address","includesubgroups");
x.t("address","var");
x.t("county","state");
x.t("county","ignores");
x.t("county","case");
x.t("partially","completed");
x.t("sets","restrictions");
x.t("fields","attributefield");
x.t("fields","find");
x.t("fields","optional");
x.t("fields","interact");
x.t("fields","groupid");
x.t("array","attributecriteriaelement");
x.t("userfield","field");
x.t("userfield","property");
x.t("userfield","name");
x.t("userfield","attributecriteriaelement");
x.t("understand","following");
x.t("attribute","indicated");
x.t("attribute","satisfies");
x.t("attribute","constraints");
x.t("attribute","attributetype");
x.t("attribute","entity");
x.t("policycenter","assignment");
x.t("policycenter","rules");
x.t("policycenter","administration");
x.t("present","method");
x.t("imposed","less");
x.t("error","occurred");
x.t("subgroups","method");
x.t("subgroups","currentgroup");
x.t("notice","search");
x.t("members","single");
x.t("suppose","method");
x.t("first","zip");
x.t("first","group");
x.t("first","match");
x.t("reason","preferable");
x.t("guidewire_selectall","var");
x.t("number","fields");
x.t("location-based","assigner");
x.t("others","match");
x.t("activity","activity.assignuserbylocation");
x.t("function","guidewire_selectall");
x.t("ands","restrictions");
x.t("retrieve","current");
x.t("different","sets");
x.t("words","method");
x.t("whether","userfield");
x.t("particular","location");
x.t("combination","assignuserbylocation");
x.t("activity.currentassignment.assignuserbylocationandattributes","activity.account.primarylocation.address");
x.t("currentgroup","parameter");
x.t("currentgroup","method");
x.t("currentgroup","currentgroup");
x.t("currentgroup","following");
x.t("currentgroup","includesubgroups");
x.t("ways","depending");
x.t("language","example");
x.t("language","attributvalue");
x.t("match","state");
x.t("match","wins");
x.t("match","county");
x.t("match","particular");
x.t("match","postal");
x.t("important","understand");
x.t("tie","round-robin");
x.t("factors","maintained");
x.t("factors","meaningful");
x.t("attributetype","method");
x.t("attributetype","language");
x.t("reference","condition-based");
x.t("follow","general");
x.t("rotations","method");
x.t("frenchspeaker.attributefield","name");
x.t("code","rather");
x.t("code","few");
x.t("groups","condition-based");
x.t("groups","perform");
x.t("groups","subgroups");
x.t("thus","method");
x.t("thus","using");
x.t("assigns","user");
x.t("assigns","assignable");
x.t("assigns","entity");
x.t("restrict","users");
x.t("-based","restriction");
x.t("level","example");
x.t("level","method");
x.t("primary","location");
x.t("qualifying","users");
x.t("matches","user");
x.t("matches","lower");
x.t("matches","users");
x.t("exact","restriction");
x.t("frenchspeaker","activity.currentassignment.assignbyuserattributes");
x.t("frenchspeaker","new");
x.t("frenchspeaker","activity.currentassignment.assignuserbylocationandattributes");
x.t("given","address");
x.t("lower","level");
x.t("persistence","round-robin");
x.t("span","multiple");
x.t("span","groups");
x.t("kind","assignment");
x.t("together","attributecriteriaelement");
x.t("actual","value");
x.t("frenchspeaker=","new");
x.t("gw.api.assignment.assignmentengineutil.getcurrentgroupfromes","assign");
x.t("occurred","messsage");
x.t("rules","guide");
x.t("null","method");
x.t("null","non-null");
x.t("null","attributecriteria");
x.t("less","strict");
x.t("activity.account.primarylocation.address","false");
x.t("activity.account.primarylocation.address","attributebasedassignmentcriteria");
x.t("include","subgroups");
x.t("include","following");
x.t("imposes","search");
x.t("house","location");
x.t("additional","qualification");
x.t("additional","restrictions");
x.t("value","method");
x.t("value","field");
x.t("value","state");
x.t("value","userfield");
x.t("value","fields");
x.t("value","attribute");
x.t("value","named");
x.t("named","field");
x.t("similar","fashion");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","house");
x.t("specific","users");
x.t("depending","whether");
x.t("depending","value");
x.t("re-uses","round-robin");
x.t("screen","load");
x.t("represent","conditions");
x.t("page","error");
x.t("sequence","however");
x.t("sequence","criteria");
x.t("location","method");
x.t("location","account");
x.t("location","level");
x.t("location","information");
x.t("location","following");
x.t("location","including");
x.t("location","attributes");
x.t("purposes","assignment");
x.t("separate","round-robin");
x.t("ignoring","matches");
x.t("met","attributecriteriaelement");
x.t("optional","fields");
x.t("interact","dependent");
x.t("behaves","differently");
x.t("information","reason");
x.t("dollar","amounts");
x.t("result","distinct");
x.t("defined","attributebasedassignmentcriteria");
x.t("appropriate","membership");
x.t("appropriate","value");
x.t("ignores","others");
x.t("attributvalue","french");
x.t("assigner","assign");
x.t("case","method");
x.t("policy","holder");
x.t("default_data:1","default");
x.t("topics","assignment");
x.t("users","speak");
x.t("users","exist");
x.t("users","always");
x.t("users","satisfy");
x.t("users","condition-based");
x.t("users","specified");
x.t("users","attribute");
x.t("users","first");
x.t("users","match");
x.t("users","important");
x.t("users","thus");
x.t("users","span");
x.t("users","consideration");
x.t("users","based");
x.t("two","fields");
x.t("two","different");
x.t("two","purposes");
x.t("administration","screen");
x.t("consideration","certain");
x.t("otherwise","method");
x.t("attributebasedassignmentcriteria","parameter");
x.t("attributebasedassignmentcriteria","new");
x.t("attributebasedassignmentcriteria","false");
x.t("attributebasedassignmentcriteria","includesubgroups");
x.t("attributebasedassignmentcriteria","var");
x.t("based","user");
x.t("based","fields");
x.t("based","primary");
x.t("based","given");
x.t("based","value");
x.t("based","attributes");
x.t("following","example");
x.t("following","condition-based");
x.t("following","assign");
x.t("entity","method");
x.t("entity","group");
x.t("entity","present");
x.t("entity","number");
x.t("entity","users");
x.t("entity","based");
x.t("attributecriteriaelement","entities");
x.t("attributecriteriaelement","behaves");
x.t("attributecriteriaelement","entity");
x.t("attributecriteriaelement","frenchspeaker.attributetype");
x.t("attributevalue","method");
x.t("attributevalue","field");
x.t("attributevalue","state");
x.t("general","pattern");
x.t("using","attributevalue");
x.t("using","operator");
x.t("using","restrictions");
x.t("assignbyuserattributes","method");
x.t("assignbyuserattributes","methods");
x.t("assignbyuserattributes","attributebasedassignmentcriteria");
x.t("includesubgroups","parameters");
x.t("includesubgroups","currentgroup");
x.t("groupid","restricts");
x.t("criteria","within");
x.t("criteria","find");
x.t("criteria","users");
x.t("criteria","following");
x.t("across","organization");
x.t("restricts","search");
x.t("postal","code");
x.t("load","factors");
x.t("maintains","separate");
x.t("operator","value");
x.t("assignuserbylocation","method");
x.t("assignuserbylocation","address");
x.t("assignuserbylocation","assignbyuserattributes");
x.t("associated","activity");
x.t("var","text_val=eval");
x.t("var","frenchspeaker");
x.t("var","frenchspeaker=");
x.t("var","attributebasedassignmentcriteria");
x.t("restrictions","simultaneously");
x.t("restrictions","always");
x.t("restrictions","requirement");
x.t("restrictions","find");
x.t("restrictions","together");
x.t("frenchspeaker.attributetype","userattributetype.tc_language");
x.t("including","postal");
x.t("even","resulting");
x.t("conditions","met");
x.t("round-robin","states");
x.t("round-robin","sequences");
x.t("round-robin","assignment");
x.t("round-robin","sequence");
x.t("attributes","method");
x.t("attributes","indicated");
x.t("attributes","user");
x.t("item","user");
x.t("object","two");
x.t("contains","actual");
x.t("activity.assignuserbylocation","activity.account.primarylocation.address");
}
