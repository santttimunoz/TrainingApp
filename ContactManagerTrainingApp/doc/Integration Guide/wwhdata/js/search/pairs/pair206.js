function FileData_Pairs(x)
{
x.t("(implement)","method");
x.t("(implement)","certain");
x.t("example","root");
x.t("example","complex");
x.t("example","personalautocovcostdata");
x.t("example","uses");
x.t("example","gosu");
x.t("example","personal");
x.t("example","chooses");
x.t("example","rating");
x.t("example","override");
x.t("example","generated");
x.t("example","personalvehiclecovcostdata");
x.t("example","described");
x.t("example","date");
x.t("uniquely","identify");
x.t("uniquely","represents");
x.t("looks","following");
x.t("statements","cost");
x.t("root","costdata");
x.t("root","policyperiod");
x.t("root","class");
x.t("particularly","external");
x.t("plain","fixed");
x.t("versionlist.costs","contains");
x.t("complex","logic");
x.t("complex","cases");
x.t("differently","creating");
x.t("differently","based");
x.t("passed-in","costdata");
x.t("equal","current");
x.t("dates","support");
x.t("dates","new");
x.t("dates","sets");
x.t("dates","superclass");
x.t("dates","optionally");
x.t("properties","costkey");
x.t("properties","instantiation");
x.t("properties","directly");
x.t("properties","constructor");
x.t("properties","window");
x.t("properties","costdatakey");
x.t("properties","cost");
x.t("properties","approach");
x.t("properties","important");
x.t("properties","simply");
x.t("properties","include");
x.t("properties","values");
x.t("properties","real");
x.t("properties","corresponding");
x.t("properties","following");
x.t("properties","compare");
x.t("properties","even");
x.t("construct","effdate");
x.t("construct","personalautocovcost");
x.t("assertkeytype","vehicleidarg");
x.t("assertkeytype","covidarg");
x.t("method","looks");
x.t("method","provide");
x.t("method","costdata");
x.t("method","contact");
x.t("method","creates");
x.t("method","errors");
x.t("method","new");
x.t("method","signature");
x.t("method","setspecificfieldsoncost");
x.t("method","throws");
x.t("method","iterate");
x.t("method","argument");
x.t("method","determine");
x.t("method","rating");
x.t("method","first");
x.t("method","super.setspecifiedfieldsoncost");
x.t("method","corrupt");
x.t("method","cannot");
x.t("method","instead");
x.t("method","createversionlist");
x.t("method","return");
x.t("method","mergeifcostequal");
x.t("method","mergeasbasisscalableifcostequal");
x.t("method","actually");
x.t("method","extends");
x.t("method","takes");
x.t("method","called");
x.t("method","copy");
x.t("method","call");
x.t("method","used");
x.t("method","returns");
x.t("provide","list");
x.t("provide","information");
x.t("columns","uniquely");
x.t("columns","columns");
x.t("columns","cost");
x.t("else","method");
x.t("parameter","type");
x.t("parameter","fixed");
x.t("exist","note");
x.t("determined","isbasisscalablecostequal");
x.t("policy-related","integrations");
x.t("rather","setting");
x.t("day","date");
x.t("protected","override");
x.t("costkey","objects");
x.t("costkey","includes");
x.t("anything","else");
x.t("version","version");
x.t("version","lists");
x.t("version","list");
x.t("version","earliest");
x.t("right","type");
x.t("right","cost");
x.t("costdata","root");
x.t("costdata","subclasses");
x.t("costdata","always");
x.t("costdata","objects");
x.t("costdata","effective");
x.t("costdata","override");
x.t("costdata","subtype");
x.t("costdata","subclass");
x.t("costdata","class");
x.t("costdata","object");
x.t("implement","method");
x.t("implement","property");
x.t("implement","rating");
x.t("implement","complicated");
x.t("implement","keyvalues");
x.t("within","branch");
x.t("within","policy");
x.t("needs","help");
x.t("every","cost");
x.t("lists","version");
x.t("lists","return");
x.t("lists","represent");
x.t("lists","appropriate");
x.t("lists","structure");
x.t("cast","appropriate");
x.t("scalable","cost");
x.t("scalable","specify");
x.t("integration","guide");
x.t("integration","implementing");
x.t("business","creates");
x.t("business","cost");
x.t("business","generates");
x.t("built-in","policycenter");
x.t("built-in","rating");
x.t("built-in","cost");
x.t("create","version");
x.t("create","instance");
x.t("create","cost");
x.t("create","entirely");
x.t("situation","policycenter");
x.t("situation","needing");
x.t("subclasses","require");
x.t("subclasses","requires");
x.t("subclasses","cost");
x.t("subclasses","returns");
x.t("personalautocovcostdata","looks");
x.t("personalautocovcostdata","_covid");
x.t("personalautocovcostdata","//");
x.t("personalautocovcostdata","object");
x.t("bullet","list");
x.t("revisioned","entity");
x.t("revisioned","object");
x.t("contact","guidewire");
x.t("refer","entities");
x.t("static","method");
x.t("variables","costdata");
x.t("variables","refer");
x.t("variables","needed");
x.t("variables","gosu");
x.t("variables","cost");
x.t("variables","_line");
x.t("various","defaults");
x.t("instantiation","example");
x.t("key","plain");
x.t("key","properties");
x.t("key","type");
x.t("key","objects");
x.t("key","first");
x.t("key","covidarg");
x.t("key","identifies");
x.t("key","given");
x.t("key","matches");
x.t("key","values");
x.t("key","links");
x.t("key","containing");
x.t("key","super");
x.t("key","object");
x.t("related","costs");
x.t("instance","foreign");
x.t("instance","costdatakey");
x.t("instance","contrast");
x.t("instance","values");
x.t("doing","anything");
x.t("effdatedutil","static");
x.t("always","false");
x.t("always","true");
x.t("always","returns");
x.t("foreign","key");
x.t("regular","foreign");
x.t("arguments","property");
x.t("void","super.setspecificfieldsoncost");
x.t("apply","newly-created");
x.t("covvl","effdatedutil.createversionlist");
x.t("integrations","rating");
x.t("creates","version");
x.t("creates","costdata");
x.t("creates","new");
x.t("creates","cost");
x.t("insufficient","check");
x.t("topic","details");
x.t("topic","provides");
x.t("topic","suppose");
x.t("topic","consider");
x.t("questions","properties");
x.t("refers","cost");
x.t("current","cost");
x.t("liability","exposure");
x.t("line","business");
x.t("line","need");
x.t("line","first");
x.t("line","cost");
x.t("line","personalautoline");
x.t("uses","key");
x.t("uses","merges");
x.t("uses","cost");
x.t("uses","value");
x.t("uses","separate");
x.t("coordinate","default");
x.t("super.setspecificfieldsoncost","line");
x.t("text_val.select","link");
x.t("support","costdata");
x.t("support","multiple");
x.t("support","policycenter");
x.t("errors","method");
x.t("copying","custom");
x.t("effdatedutil.createversionlist","branch");
x.t("effdatedutil.createversionlist","line.branch");
x.t("mode","api");
x.t("tell","rating");
x.t("necessary","return");
x.t("change","forward");
x.t("change","effective");
x.t("change","rating");
x.t("change","fixed");
x.t("change","across");
x.t("type","costkey");
x.t("type","version");
x.t("type","access");
x.t("type","costdatakey");
x.t("type","contrast");
x.t("type","fixed");
x.t("type","cost");
x.t("type","versionlist");
x.t("type","personalautocovcost");
x.t("type","numeric");
x.t("type","policyline");
x.t("15","end");
x.t("thing","example");
x.t("thing","getversionedcosts");
x.t("thing","row");
x.t("thing","stores");
x.t("thing","values");
x.t("customer","support");
x.t("conceptual","information");
x.t("expdate","assertkeytype");
x.t("expdate","date");
x.t("time","thus");
x.t("time","compile-time");
x.t("time","application");
x.t("time","structure");
x.t("time","following");
x.t("calls","key");
x.t("calls","getversionedcosts");
x.t("calls","constructor");
x.t("merges","costdata");
x.t("merges","cost");
x.t("satisfy","following");
x.t("16","september");
x.t("getter","function");
x.t("external","rating");
x.t("external","system");
x.t("multiple","properties");
x.t("multiple","types");
x.t("multiple","vehicles");
x.t("identify","properties");
x.t("identify","related");
x.t("however","subclasses");
x.t("however","cost");
x.t("however","cases");
x.t("coverage\u2019s","cost");
x.t("default","rating");
x.t("require","constructor");
x.t("require","checking");
x.t("guidewire","customer");
x.t("guidewire","strongly");
x.t("needed","example");
x.t("needed","construct");
x.t("entities","root");
x.t("entities","example");
x.t("entities","version");
x.t("entities","updates");
x.t("entities","branch");
x.t("entities","match");
x.t("entities","immediately");
x.t("entities","links");
x.t("property","version");
x.t("property","getter");
x.t("property","mergeasbasisscalable");
x.t("property","getversionedcosts");
x.t("property","cost.effectivedate");
x.t("property","simple");
x.t("property","name");
x.t("property","gosu");
x.t("property","continue");
x.t("property","contain");
x.t("property","keyvalues");
x.t("property","cost");
x.t("property","function");
x.t("property","represents");
x.t("property","instead");
x.t("property","createversionlist");
x.t("property","important");
x.t("property","represent");
x.t("property","personalvehiclecov");
x.t("property","help");
x.t("property","called");
x.t("property","returns");
x.t("convert","cost");
x.t("encapsulated","key");
x.t("apis","version");
x.t("mergeasbasisscalable","false");
x.t("mergeasbasisscalable","boolean");
x.t("mergeasbasisscalable","treat");
x.t("mergeasbasisscalable","cases");
x.t("link","revisioned");
x.t("link","directly");
x.t("link","alternatively");
x.t("link","cost");
x.t("link","persisted");
x.t("link","policyline");
x.t("new","line");
x.t("new","initialized");
x.t("new","changed");
x.t("new","cost");
x.t("new","subclass");
x.t("engine","needs");
x.t("engine","create");
x.t("engine","creates");
x.t("engine","uses");
x.t("engine","line");
x.t("engine","merges");
x.t("engine","new");
x.t("engine","determines");
x.t("engine","finds");
x.t("engine","no");
x.t("engine","find");
x.t("engine","cost");
x.t("engine","asks");
x.t("engine","instead");
x.t("engine","considers");
x.t("engine","behaves");
x.t("engine","merge");
x.t("certain","methods");
x.t("objects","exist");
x.t("objects","key");
x.t("objects","regular");
x.t("objects","copying");
x.t("objects","change");
x.t("objects","default");
x.t("objects","objects");
x.t("objects","setspecificfieldsoncost");
x.t("objects","remember");
x.t("objects","handle");
x.t("objects","contain");
x.t("objects","store");
x.t("objects","rating");
x.t("objects","cost");
x.t("objects","share");
x.t("objects","different");
x.t("objects","private");
x.t("objects","properly");
x.t("objects","simply");
x.t("objects","kind");
x.t("objects","similar");
x.t("objects","represent");
x.t("objects","context");
x.t("objects","information");
x.t("objects","two");
x.t("objects","mergable");
x.t("objects","based");
x.t("objects","costs");
x.t("objects","generally");
x.t("objects","update");
x.t("details","revisioning");
x.t("details","writing");
x.t("updates","existing");
x.t("want","link");
x.t("want","find");
x.t("branch","private");
x.t("branch","represent");
x.t("branch","policyperiod");
x.t("branch","easily");
x.t("branch","across");
x.t("signature","effdatedutil.createversionlist");
x.t("access","type-specific");
x.t("single","version");
x.t("==","_vehicleid");
x.t("premium","create");
x.t("premium","overrides");
x.t("includes","costdata");
x.t("includes","type");
x.t("includes","subtype-specific");
x.t("includes","matching");
x.t("vehicleidarg","key");
x.t("vehicleidarg","personalvehicle");
x.t("vehicleidarg","_covid");
x.t("price","words");
x.t("price","represents");
x.t("price","date");
x.t("passes","fixed");
x.t("getversionedcosts","method");
x.t("getversionedcosts","line");
x.t("getversionedcosts","second");
x.t("getversionedcosts","first");
x.t("getversionedcosts","real");
x.t("block","tests");
x.t("personalautocovversionlist","return");
x.t("messsage","policycenter");
x.t("determines","coverage");
x.t("determines","cost");
x.t("finds","relevant");
x.t("list","example");
x.t("list","version");
x.t("list","key");
x.t("list","apis");
x.t("list","property");
x.t("list","list");
x.t("list","api");
x.t("list","no");
x.t("list","typed");
x.t("list","follows");
x.t("list","com.guidewire.commons.entity.effdate.effdatedversionlist");
x.t("list","empty");
x.t("list","earlier");
x.t("list","auto");
x.t("list","supported");
x.t("list","fixed");
x.t("list","cost");
x.t("list","represents");
x.t("list","words");
x.t("list","dereference");
x.t("list","properly");
x.t("list","superclass");
x.t("list","simply");
x.t("list","return");
x.t("list","generated");
x.t("list","values");
x.t("list","note");
x.t("list","costs");
x.t("list","relevant");
x.t("list","untyped");
x.t("list","containing");
x.t("list","contains");
x.t("list","object");
x.t("need","call");
x.t("(costvl)",".tolist");
x.t("//among","rows");
x.t("indicates","whether");
x.t("recommends","constructor");
x.t("id","uniquely");
x.t("id","key");
x.t("id","encapsulated");
x.t("id","no");
x.t("id","stored");
x.t("id","target");
x.t("id","string");
x.t("id","coverage");
x.t("id","means");
x.t("id","cost");
x.t("id","may");
x.t("id","private");
x.t("id","vehicle");
x.t("id","keys");
x.t("id","value");
x.t("id","specifying");
x.t("id","values");
x.t("id","real");
x.t("id","object");
x.t("during","merge");
x.t("simplifies","rating");
x.t("revisioning","documentation");
x.t("revisioning","system");
x.t("revisioning","across");
x.t("unsupported","return");
x.t("add","custom");
x.t("guide","policy-related");
x.t("guide","no");
x.t("guide","fixed");
x.t("guide","cost");
x.t("guide","important");
x.t("guide","code");
x.t("initialized","cost");
x.t("check","merely");
x.t("cost.effectivedate","contrast");
x.t("results","external");
x.t("api","overview");
x.t("api","reference");
x.t("fixedidkey","key");
x.t("simple","case");
x.t("subclass-specific","properties");
x.t("setspecificfieldsoncost","method");
x.t("setspecificfieldsoncost","doing");
x.t("setspecificfieldsoncost","line");
x.t("remember","cost");
x.t("reasons","find");
x.t("overview","application");
x.t("throws","exception");
x.t("false","accordingly");
x.t("false","rating");
x.t("false","cost");
x.t("false","class");
x.t("directly","method");
x.t("directly","link");
x.t("directly","destination");
x.t("directly","cost");
x.t("directly","instead");
x.t("directly","page");
x.t("directly","object");
x.t("directly","contains");
x.t("defaults","cost");
x.t("personalvehicle","assertkeytype");
x.t("personalvehicle","_vehicleid");
x.t("_vehicleid","example");
x.t("_vehicleid","vehicleidarg");
x.t("_vehicleid","_covid");
x.t("_vehicleid","versioned");
x.t("_vehicleid","c.personalvehicle.fixedid");
x.t("requires","constructor");
x.t("requires","careful");
x.t("termamount","property");
x.t("writing","property");
x.t("costentity.policyline","_line");
x.t("handle","links");
x.t("newly-created","cost");
x.t("desired","object");
x.t("line.branch","_covid");
x.t("true","passed-in");
x.t("true","example");
x.t("true","always");
x.t("true","false");
x.t("true","rating");
x.t("true","cost");
x.t("true","costs");
x.t("helper","method");
x.t("text_val.focus","text_val.select");
x.t("common","situation");
x.t("common","simple");
x.t("forward","example");
x.t("forward","rating");
x.t("no","version");
x.t("no","fixed");
x.t("no","cost");
x.t("no","existing");
x.t("no","implementation");
x.t("range","example");
x.t("range","price");
x.t("range","january");
x.t("range","march");
x.t("name","cost");
x.t("stored","cost");
x.t("costvl.allversions.first","return");
x.t("creating","costdata");
x.t("constructor","method");
x.t("constructor","rather");
x.t("constructor","creates");
x.t("constructor","includes");
x.t("constructor","constructor");
x.t("constructor","sets");
x.t("constructor","superclass");
x.t("constructor","takes");
x.t("gosu","looks");
x.t("gosu","block");
x.t("gosu","dynamically");
x.t("changed","cost");
x.t("typed","version");
x.t("follows","//");
x.t("corresponds","no");
x.t("iterate","across");
x.t("codes","auditable");
x.t("chargegroup","rateamounttype");
x.t("custom","properties");
x.t("custom","logic");
x.t("base","class");
x.t("argument","root");
x.t("argument","identifies");
x.t("direct","link");
x.t("com.guidewire.commons.entity.effdate.effdatedversionlist","//");
x.t("com.guidewire.commons.entity.effdate.effdatedversionlist","var");
x.t("tests","item");
x.t("accordingly","rating");
x.t("cover","period");
x.t("auditable","basis");
x.t("methods","constructors");
x.t("methods","override");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("prior","change");
x.t("prior","effective");
x.t("checking","multiple");
x.t("provides","context");
x.t("chargepattern","chargegroup");
x.t("alternatively","optionally");
x.t("window","mode");
x.t("exists","version");
x.t("zero","version");
x.t("boolean","//among");
x.t("boolean","return");
x.t("determine","cost");
x.t("determine","whether");
x.t("continue","example");
x.t("standard","method");
x.t("standard","policy");
x.t("find","right");
x.t("find","cost");
x.t("find","existing");
x.t("find","versioned");
x.t("find","corresponding");
x.t("place","direct");
x.t("destination","entity");
x.t("rest","topic");
x.t("enhancement","method");
x.t("entity.windowed.personalautocovcostversionlist","boolean");
x.t("typeis","personalautocovcost");
x.t("basis","scalable");
x.t("basis","false");
x.t("basis","actualtermamount");
x.t("expiration","dates");
x.t("expiration","date");
x.t("sets","various");
x.t("sets","local");
x.t("local","variables");
x.t("target","object");
x.t("string","key");
x.t("string","directly");
x.t("string","reason");
x.t("write","code");
x.t("critical","conceptual");
x.t("empty","list");
x.t("array","entities");
x.t("exposure","costs");
x.t("coverage","example");
x.t("coverage","version");
x.t("coverage","premium");
x.t("coverage","id");
x.t("coverage","fixed");
x.t("coverage","cost");
x.t("coverage","may");
x.t("coverage","using");
x.t("coverage","var");
x.t("personal","auto");
x.t("personal","vehicle");
x.t("earlier","topic");
x.t("contain","key");
x.t("contain","numeric");
x.t("contain","costs");
x.t("costdatakey","objects");
x.t("costdatakey","includes");
x.t("costdatakey","object");
x.t("encapsulates","key");
x.t("encapsulates","entity");
x.t("concept","cost");
x.t("second","parameter");
x.t("chooses","coverage");
x.t("policycenter","integration");
x.t("policycenter","creates");
x.t("policycenter","uses");
x.t("policycenter","calls");
x.t("policycenter","default");
x.t("policycenter","revisioning");
x.t("policycenter","concept");
x.t("policycenter","stores");
x.t("rating","integration");
x.t("rating","new");
x.t("rating","engine");
x.t("rating","determine");
x.t("rating","code");
x.t("rating","engine\u2019s");
x.t("rating","data");
x.t("rating","date");
x.t("rating","engines");
x.t("effective","time");
x.t("effective","expiration");
x.t("effective","date");
x.t("auto","example");
x.t("auto","coverage");
x.t("auto","cost");
x.t("store","link");
x.t("store","fixed");
x.t("store","entity\u2019s");
x.t("setfieldvalue","example");
x.t("setfieldvalue","method");
x.t("setfieldvalue","cost");
x.t("complicated","requires");
x.t("complicated","function");
x.t("error","occurred");
x.t("needing","new");
x.t("strongly","recommends");
x.t("contrast","constructor");
x.t("contrast","cost");
x.t("equivalent","mergable");
x.t("notice","built-in");
x.t("supported","code");
x.t("logic","necessary");
x.t("logic","property");
x.t("collectively","identify");
x.t("suppose","two");
x.t("delegate","standard");
x.t("next","setspecificfieldsoncost");
x.t("period","spanned");
x.t("(c)","_vehicleid");
x.t("fixed","id");
x.t("fixed","ids");
x.t("means","method");
x.t("means","vehicle");
x.t("first","parameter");
x.t("first","argument");
x.t("first","reference");
x.t("first","call");
x.t("resolve","difference");
x.t("reason","notice");
x.t("collection","enhancement");
x.t("cost","equal");
x.t("cost","properties");
x.t("cost","determined");
x.t("cost","key");
x.t("cost","topic");
x.t("cost","support");
x.t("cost","thing");
x.t("cost","entities");
x.t("cost","objects");
x.t("cost","constructor");
x.t("cost","chargepattern");
x.t("cost","basis");
x.t("cost","delegate");
x.t("cost","fixed");
x.t("cost","collection");
x.t("cost","cost");
x.t("cost","cannot");
x.t("cost","rows");
x.t("cost","vehicle");
x.t("cost","matches");
x.t("cost","keys");
x.t("cost","cost.setfieldvalue");
x.t("cost","data");
x.t("cost","personalautocovcost");
x.t("cost","information");
x.t("cost","appropriate");
x.t("cost","defined");
x.t("cost","choose");
x.t("cost","entity");
x.t("cost","additionally");
x.t("cost","policyline");
x.t("cost","associated");
x.t("cost","object");
x.t("constructors","implement");
x.t("constructors","cost");
x.t("constructors","override");
x.t("constructors","following");
x.t("guidewire_selectall","var");
x.t("personalautocov","_vehicleid");
x.t("personalautocov","_covid");
x.t("c.personalautocov.fixedid","key");
x.t("keyvalues","method");
x.t("keyvalues","property");
x.t("keyvalues","list");
x.t("keyvalues","returns");
x.t("entity\u2019s","fixed");
x.t("function","property");
x.t("function","getversionedcosts");
x.t("function","setspecificfieldsoncost");
x.t("function","guidewire_selectall");
x.t("function","keyvalues");
x.t("function","cost");
x.t("function","words");
x.t("function","iscostversionlistforvehicle");
x.t("function","general");
x.t("adjacent","date");
x.t("merely","fixed");
x.t("asks","cost");
x.t("rateamounttype","columns");
x.t("rateamounttype","properties");
x.t("super.setspecifiedfieldsoncost","note");
x.t("approach","getversionedcosts");
x.t("approach","work");
x.t("personalvehiclecovversionlist","common");
x.t("personalvehiclecovversionlist","//");
x.t("personalvehiclecovversionlist","object");
x.t("firstversion","costvl.allversions.first");
x.t("firstversion","typeis");
x.t("car","car");
x.t("car","cannot");
x.t("private","variables");
x.t("private","function");
x.t("private","variable");
x.t("covidarg","key");
x.t("covidarg","rating");
x.t("covidarg","personalautocov");
x.t("different","reasons");
x.t("different","fixed");
x.t("different","adjacent");
x.t("different","date");
x.t("words","list");
x.t("words","override");
x.t("words","value");
x.t("share","coverage");
x.t("share","cost");
x.t("may","support");
x.t("may","require");
x.t("may","costs");
x.t("whether","two");
x.t("whether","merge");
x.t("represents","example");
x.t("represents","multiple");
x.t("represents","cost");
x.t("represents","car");
x.t("represents","different");
x.t("represents","database");
x.t("represents","object");
x.t("confuse","key");
x.t("confuse","cost");
x.t("crucial","policycenter");
x.t("carefully","consider");
x.t("corrupt","rating");
x.t("cannot","change");
x.t("cannot","represents");
x.t("cannot","simply");
x.t("receive","list");
x.t("technically","two");
x.t("non-foreign-key","properties");
x.t("instead","key");
x.t("instead","merges");
x.t("instead","stores");
x.t("instead","returns");
x.t("instead","contains");
x.t("starting","write");
x.t("stores","objects");
x.t("stores","fixed");
x.t("stores","costs");
x.t("row","represents");
x.t("arbitrary","sense");
x.t("dereference","vehicle");
x.t("implementing","rating");
x.t("properly","built-in");
x.t("properly","crucial");
x.t("properly","extremely");
x.t("superclass","cast");
x.t("superclass","no");
x.t("superclass","constructor");
x.t("superclass","implementation");
x.t("things","default");
x.t("things","true");
x.t("match","properties");
x.t("match","cost");
x.t("changes","across");
x.t("types","costs");
x.t("covvl.costs.where","costvl");
x.t("earliest","effective");
x.t("important","conceptual");
x.t("important","guidewire");
x.t("important","information");
x.t("important","note");
x.t("simply","properties");
x.t("simply","contain");
x.t("simply","code");
x.t("simply","policyline.branch");
x.t("simply","gets");
x.t("calling","code");
x.t("createversionlist","method");
x.t("actualamount","properties");
x.t("isbasisscalablecostequal","method");
x.t("effdate","expdate");
x.t("effdate","date");
x.t("steps","occur");
x.t("end","day");
x.t("code","particularly");
x.t("code","method");
x.t("code","calls");
x.t("code","passes");
x.t("code","expects");
x.t("code","following");
x.t("code","reading");
x.t("correspond","current");
x.t("correspond","cost");
x.t("reference","version");
x.t("reference","application");
x.t("rows","cost");
x.t("rows","database");
x.t("rows","represent");
x.t("firstversion.vehicle.fixedid","==");
x.t("override","(implement)");
x.t("override","property");
x.t("override","needed");
x.t("override","getversionedcosts");
x.t("override","cost");
x.t("override","constructors");
x.t("override","function");
x.t("override","work");
x.t("_covid","create");
x.t("_covid","property");
x.t("_covid","personalautocovversionlist");
x.t("_covid","c.personalautocov.fixedid");
x.t("_covid","personalvehiclecovversionlist");
x.t("_covid","covidarg");
x.t("_covid","cost.setfieldvalue");
x.t("_covid","setting");
x.t("pricing","kind");
x.t("vehicle","id");
x.t("vehicle","coverage");
x.t("vehicle","means");
x.t("vehicle","fixed");
x.t("vehicle","whose");
x.t("vehicle","note");
x.t("ids","external");
x.t("ids","cost");
x.t("return","version");
x.t("return","create");
x.t("return","getversionedcosts");
x.t("return","list");
x.t("return","_vehicleid");
x.t("return","true");
x.t("return","firstversion");
x.t("return","covvl.costs.where");
x.t("return","value");
x.t("return","covvl.costs");
x.t("assemble","cost");
x.t("term","structure");
x.t("expects","receive");
x.t("identifies","branch");
x.t("identifies","desired");
x.t("adds","personalvehiclecovversionlist");
x.t("adds","together");
x.t("thus","coverage");
x.t("matches","current");
x.t("matches","vehicle");
x.t("matches","existing");
x.t("given","cost");
x.t("database","find");
x.t("database","cost");
x.t("database","rows");
x.t("considers","two");
x.t("january","march");
x.t("kind","cost");
x.t("whose","price");
x.t("whose","fixed");
x.t("documentation","critical");
x.t("branches","across");
x.t("variable","cost");
x.t("variable","called");
x.t("seem","arbitrary");
x.t("together","basis");
x.t("occurred","messsage");
x.t("subtype-specific","properties");
x.t("subtype-specific","columns");
x.t("subtype-specific","data");
x.t("existing","premium");
x.t("existing","cost");
x.t("existing","costs");
x.t("extremely","careful");
x.t("consider","implement");
x.t("consider","reviewing");
x.t("subtopics","describe");
x.t("keys","key");
x.t("keys","link");
x.t("include","keyvalues");
x.t("instances","key");
x.t("instances","line");
x.t("instances","place");
x.t("instances","calling");
x.t("instances","correspond");
x.t("instances","database");
x.t("instances","kind");
x.t("instances","two");
x.t("cost.setfieldvalue","personalvehicle");
x.t("cost.setfieldvalue","personalautocov");
x.t("mergeifcostequal","true");
x.t("similar","costs");
x.t("value","tell");
x.t("value","time");
x.t("value","mergeasbasisscalable");
x.t("value","termamount");
x.t("value","cost");
x.t("value","entity");
x.t("additional","properties");
x.t("type-specific","properties");
x.t("mergeasbasisscalableifcostequal","method");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("engine\u2019s","extractcostdatasfromexistingcosts");
x.t("specific","type");
x.t("knows","copy");
x.t("implementation","method");
x.t("implementation","next");
x.t("send","entity");
x.t("actualtermamount","actualamount");
x.t("process","questions");
x.t("process","policycenter");
x.t("worry","details");
x.t("versioned","costs");
x.t("generated","properties");
x.t("generated","property");
x.t("exception","gets");
x.t("actually","comparing");
x.t("extends","cost");
x.t("takes","effective");
x.t("takes","cost");
x.t("takes","existing");
x.t("takes","specific");
x.t("takes","two");
x.t("subtype","personalautocovcostdata");
x.t("subtype","chargepattern");
x.t("subtype","compare");
x.t("represent","thing");
x.t("represent","cost");
x.t("represent","pricing");
x.t("represent","existing");
x.t("represent","personalautocovcost");
x.t("represent","taxes");
x.t("personalvehiclecov","entity");
x.t("page","error");
x.t("help","default");
x.t("help","copy");
x.t("help","merge");
x.t("context","refers");
x.t("context","rating");
x.t("personalautoline","list");
x.t("personalautoline","cost");
x.t("compile-time","type");
x.t("separate","helper");
x.t("separate","cost");
x.t(".tolist","private");
x.t("specifying","whether");
x.t("data","implement");
x.t("data","subclasses");
x.t("data","coverage\u2019s");
x.t("data","property");
x.t("data","objects");
x.t("data","during");
x.t("data","common");
x.t("data","no");
x.t("data","constructor");
x.t("data","base");
x.t("data","cost");
x.t("data","private");
x.t("data","subtype");
x.t("data","classes");
x.t("data","object\u2019s");
x.t("data","subclass");
x.t("data","class");
x.t("data","object");
x.t("personalautocovcost","void");
x.t("personalautocovcost","coverage\u2019s");
x.t("personalautocovcost","firstversion.vehicle.fixedid");
x.t("personalautocovcost","entity");
x.t("personalautocovcost","super");
x.t("graph","property");
x.t("graph","fixed");
x.t("graph","cost");
x.t("costdata.keyvalues","property");
x.t("information","version");
x.t("information","revisioned");
x.t("information","complicated");
x.t("information","policycenter");
x.t("information","private");
x.t("information","worry");
x.t("versionlist","represents");
x.t("behaves","differently");
x.t("appropriate","type");
x.t("appropriate","cost");
x.t("appropriate","specific");
x.t("march","15");
x.t("march","16");
x.t("september","29");
x.t("29","price");
x.t("defined","cost");
x.t("persisted","entity");
x.t("policyperiod","branch");
x.t("policyperiod","fixedidkey");
x.t("personalvehiclecovcostdata","creates");
x.t("personalvehiclecovcostdata","costs");
x.t("personalvehiclecovcostdata","gets");
x.t("costvl","entity.windowed.personalautocovcostversionlist");
x.t("costvl","iscostversionlistforvehicle");
x.t("c.personalvehicle.fixedid","_covid");
x.t("values","key");
x.t("values","default");
x.t("values","property");
x.t("values","list");
x.t("values","policycenter");
x.t("values","collectively");
x.t("values","cost");
x.t("values","keyvalues");
x.t("values","private");
x.t("values","match");
x.t("values","return");
x.t("values","costdata.keyvalues");
x.t("values","matching");
x.t("policy","line");
x.t("policy","term");
x.t("policy","graph");
x.t("pacostdata","however");
x.t("application","guide");
x.t("application","knowledge");
x.t("knowledge","policycenter");
x.t("reviewing","revisioning");
x.t("case","version");
x.t("case","target");
x.t("case","separate");
x.t("covvl.costs","however");
x.t("comparing","version");
x.t("treat","costs");
x.t("described","bullet");
x.t("called","setfieldvalue");
x.t("called","_covid");
x.t("called","iscostversionlistforvehicle");
x.t("called","costs");
x.t("structure","revisioning");
x.t("taxes","fees");
x.t("choose","earliest");
x.t("two","arguments");
x.t("two","personal");
x.t("two","constructors");
x.t("two","cost");
x.t("two","different");
x.t("two","costs");
x.t("date","current");
x.t("date","change");
x.t("date","expdate");
x.t("date","vehicleidarg");
x.t("date","range");
x.t("date","seem");
x.t("date","ranges");
x.t("date","var");
x.t("note","version");
x.t("note","insufficient");
x.t("note","unsupported");
x.t("note","helper");
x.t("note","earlier");
x.t("note","cost");
x.t("note","confuse");
x.t("note","starting");
x.t("note","costs");
x.t("classes","override");
x.t("classes","warning");
x.t("iscostversionlistforvehicle","determines");
x.t("iscostversionlistforvehicle","(costvl)");
x.t("iscostversionlistforvehicle","costvl");
x.t("sense","however");
x.t("work","remember");
x.t("work","cost");
x.t("work","properly");
x.t("optionally","subtype-specific");
x.t("optionally","pass");
x.t("mergable","satisfy");
x.t("mergable","even");
x.t("algorithm","note");
x.t("numeric","fixed");
x.t("copy","built-in");
x.t("copy","subclass-specific");
x.t("copy","additional");
x.t("easily","getversionedcosts");
x.t("easily","send");
x.t("_line","resolve");
x.t("_line","//");
x.t("object\u2019s","version");
x.t("object\u2019s","getversionedcosts");
x.t("cases","complex");
x.t("cases","property");
x.t("cases","target");
x.t("fees","costs");
x.t("itself","important");
x.t("based","existing");
x.t("based","value");
x.t("subclass","costdata");
x.t("subclass","implement");
x.t("subclass","calls");
x.t("subclass","default");
x.t("subclass","indicates");
x.t("subclass","rating");
x.t("subclass","cost");
x.t("subclass","override");
x.t("subclass","note");
x.t("subclass","pass");
x.t("entirely","new");
x.t("costs","example");
x.t("costs","differently");
x.t("costs","built-in");
x.t("costs","thing");
x.t("costs","property");
x.t("costs","directly");
x.t("costs","prior");
x.t("costs","empty");
x.t("costs","target");
x.t("costs","rating");
x.t("costs","equivalent");
x.t("costs","cost");
x.t("costs","things");
x.t("costs","match");
x.t("costs","override");
x.t("costs","represent");
x.t("costs","entity");
x.t("costs","class");
x.t("costs","vehicles");
x.t("costs","prorating");
x.t("costs","object");
x.t("immediately","prior");
x.t("extractcostdatasfromexistingcosts","method");
x.t("merge","costdata");
x.t("merge","convert");
x.t("merge","objects");
x.t("merge","cost");
x.t("merge","process");
x.t("merge","costs");
x.t("call","superclass");
x.t("real","link");
x.t("real","world");
x.t("policyline.branch","property");
x.t("following","statements");
x.t("following","protected");
x.t("following","true");
x.t("following","different");
x.t("following","things");
x.t("following","steps");
x.t("following","override");
x.t("following","subtopics");
x.t("following","//");
x.t("relevant","cost");
x.t("relevant","object");
x.t("entity","example");
x.t("entity","instance");
x.t("entity","coordinate");
x.t("entity","type");
x.t("entity","objects");
x.t("entity","costentity.policyline");
x.t("entity","sets");
x.t("entity","string");
x.t("entity","setfieldvalue");
x.t("entity","non-foreign-key");
x.t("entity","changes");
x.t("entity","instances");
x.t("entity","itself");
x.t("entity","links");
x.t("entity","contains");
x.t("used","rating");
x.t("corresponding","new");
x.t("corresponding","costs");
x.t("links","method");
x.t("links","objects");
x.t("links","directly");
x.t("links","coverage");
x.t("links","fixed");
x.t("links","cost");
x.t("engines","easily");
x.t("system","results");
x.t("system","assemble");
x.t("system","note");
x.t("system","difference");
x.t("untyped","version");
x.t("setting","properties");
x.t("setting","list");
x.t("//","versionlist.costs");
x.t("//","version");
x.t("//","constructor");
x.t("//","contain");
x.t("//","work");
x.t("class","provide");
x.t("class","costdata");
x.t("class","line");
x.t("class","add");
x.t("class","codes");
x.t("class","personal");
x.t("class","return");
x.t("class","override");
x.t("class","knows");
x.t("class","help");
x.t("class","personalvehiclecovcostdata");
x.t("class","policy");
x.t("class","pacostdata");
x.t("class","class");
x.t("class","returns");
x.t("warning","carefully");
x.t("containing","version");
x.t("containing","single");
x.t("containing","zero");
x.t("containing","fixed");
x.t("general","liability");
x.t("general","approach");
x.t("using","method");
x.t("using","standard");
x.t("using","private");
x.t("additionally","adds");
x.t("pass","effective");
x.t("pass","fixed");
x.t("compare","two");
x.t("compare","following");
x.t("returns","key");
x.t("returns","always");
x.t("returns","list");
x.t("returns","false");
x.t("returns","true");
x.t("returns","object\u2019s");
x.t("overrides","apply");
x.t("across","time");
x.t("across","effective");
x.t("across","branches");
x.t("across","policy");
x.t("across","costs");
x.t("vehicles","want");
x.t("vehicles","case");
x.t("occur","rating");
x.t("ranges","example");
x.t("ranges","matching");
x.t("policyline","method");
x.t("policyline","simply");
x.t("policyline","entity");
x.t("world","example");
x.t("world","conditions");
x.t("associated","coverage");
x.t("var","covvl");
x.t("var","text_val=eval");
x.t("var","firstversion");
x.t("describe","methods");
x.t("spanned","cost");
x.t("generates","cost");
x.t("even","properties");
x.t("even","different");
x.t("careful","implement");
x.t("careful","application");
x.t("reading","rest");
x.t("conditions","cost");
x.t("prorating","root");
x.t("object","example");
x.t("object","properties");
x.t("object","provide");
x.t("object","right");
x.t("object","within");
x.t("object","every");
x.t("object","situation");
x.t("object","create");
x.t("object","key");
x.t("object","effdatedutil");
x.t("object","type");
x.t("object","however");
x.t("object","property");
x.t("object","want");
x.t("object","getversionedcosts");
x.t("object","directly");
x.t("object","constructor");
x.t("object","corresponds");
x.t("object","cover");
x.t("object","methods");
x.t("object","exists");
x.t("object","determine");
x.t("object","basis");
x.t("object","encapsulates");
x.t("object","contain");
x.t("object","coverage");
x.t("object","personal");
x.t("object","setfieldvalue");
x.t("object","fixed");
x.t("object","cost");
x.t("object","may");
x.t("object","technically");
x.t("object","instead");
x.t("object","return");
x.t("object","vehicle");
x.t("object","matches");
x.t("object","whose");
x.t("object","subtype");
x.t("object","note");
x.t("object","merge");
x.t("object","subclass");
x.t("object","links");
x.t("object","following");
x.t("object","general");
x.t("object","using");
x.t("object","object");
x.t("object","difference");
x.t("object","contains");
x.t("super","(c)");
x.t("super","effdate");
x.t("generally","includes");
x.t("matching","vehicle");
x.t("matching","subtype-specific");
x.t("matching","algorithm");
x.t("contains","list");
x.t("contains","array");
x.t("contains","empty");
x.t("contains","fixed");
x.t("contains","vehicle");
x.t("contains","costs");
x.t("difference","simplifies");
x.t("difference","costs");
x.t("difference","links");
x.t("update","cost");
x.t("gets","version");
x.t("gets","coverage");
x.t("dynamically","adds");
x.t("item","match");
x.t("specify","merge");
}
