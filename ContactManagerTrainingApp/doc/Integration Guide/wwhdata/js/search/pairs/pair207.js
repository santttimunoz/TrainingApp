function FileData_Pairs(x)
{
x.t("debugging","debugging");
x.t("debugging","may");
x.t("equal","method");
x.t("equal","iscostequal");
x.t("example","var");
x.t("unlike","getexistingcost");
x.t("method","method");
x.t("method","creates");
x.t("method","debugstring");
x.t("method","calls");
x.t("method","setspecificfieldsoncost");
x.t("method","getorcreatecost");
x.t("method","sets");
x.t("method","populatecostentity");
x.t("method","complicated");
x.t("method","cost");
x.t("method","getpopulatedcost");
x.t("method","section");
x.t("method","similar");
x.t("method","takes");
x.t("method","called");
x.t("method","two");
x.t("method","getexistingcost");
x.t("method","returns");
x.t("method","modify");
x.t("properties","example");
x.t("properties","costdata");
x.t("properties","calls");
x.t("properties","cloned");
x.t("properties","cost");
x.t("properties","criteria");
x.t("dates","method");
x.t("dates","cost");
x.t("policy-related","integrations");
x.t("just","different");
x.t("every","cost");
x.t("costdata","debug");
x.t("costdata","class");
x.t("implement","rating");
x.t("caller","discards");
x.t("integration","guide");
x.t("integration","implementing");
x.t("integration","code");
x.t("business","cost");
x.t("built-in","apis");
x.t("built-in","default");
x.t("built-in","abstract");
x.t("create","new");
x.t("description","method");
x.t("related","cost");
x.t("instance","corresponds");
x.t("instance","cost");
x.t("instance","call");
x.t("always","cloned");
x.t("auto-generated","fixed");
x.t("few","things");
x.t("integrations","rating");
x.t("creates","new");
x.t("line","business");
x.t("later","cost");
x.t("text_val.select","link");
x.t("debugstring","generates");
x.t("thing","just");
x.t("calls","public");
x.t("calls","getversionedcosts");
x.t("calls","internal");
x.t("calls","case");
x.t("time","equal");
x.t("public","method");
x.t("rate-scalable","cost");
x.t("however","method");
x.t("multiple","choose");
x.t("apis","costdata");
x.t("apis","built-in");
x.t("apis","needed");
x.t("apis","getting");
x.t("apis","merging");
x.t("apis","call");
x.t("default","rating");
x.t("guidewire","recommendation");
x.t("needed","implement");
x.t("checks","two");
x.t("non-core","(line-specific)");
x.t("link","directly");
x.t("new","auto-generated");
x.t("new","line");
x.t("new","earlier");
x.t("new","cost");
x.t("engine","chooses");
x.t("engine","modify");
x.t("objects","adjacent");
x.t("objects","together");
x.t("getting","cost");
x.t("getting","optionally");
x.t("want","actually");
x.t("among","properties");
x.t("amounts","along");
x.t("getversionedcosts","method");
x.t("choice","depends");
x.t("messsage","policycenter");
x.t("need","call");
x.t("finds","matching");
x.t("id","method");
x.t("id","value");
x.t("guide","policy-related");
x.t("api","methods");
x.t("basis-scalable","cost");
x.t("basis-scalable","costs");
x.t("depends","whether");
x.t("remember","fixed");
x.t("setspecificfieldsoncost","cost");
x.t("directly","page");
x.t("true","checks");
x.t("requires","adding");
x.t("text_val.focus","text_val.select");
x.t("iscostequal","method");
x.t("creating","corresponding");
x.t("no","existing");
x.t("possibly","outcomes");
x.t("corresponds","cost");
x.t("getorcreatecost","method");
x.t("getorcreatecost","existing");
x.t("getorcreatecost","(mypolicyline)");
x.t("getorcreatecost","matching");
x.t("handles","basis-scalable");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","attempt");
x.t("helpful","cost");
x.t("window","returned");
x.t("none","effective");
x.t("cloned","fixed");
x.t("cloned","cost");
x.t("cloned","existing");
x.t("basis","amount");
x.t("basis","rates");
x.t("search","method");
x.t("attempt","modify");
x.t("string","containing");
x.t("sets","expiration");
x.t("expiration","earlier");
x.t("expiration","date");
x.t("rate/amount/basis","properties");
x.t("earlier","description");
x.t("earlier","cost");
x.t("chooses","earliest");
x.t("populatecostentity","populates");
x.t("policycenter","integration");
x.t("rating","integration");
x.t("rating","new");
x.t("rating","engine");
x.t("rating","architecture");
x.t("effective","dates");
x.t("effective","time");
x.t("effective","window");
x.t("effective","effective");
x.t("effective","date");
x.t("complicated","merging");
x.t("error","occurred");
x.t("logic","several");
x.t("finally","method");
x.t("fixed","id");
x.t("fixed","ids");
x.t("(line-specific)","cost");
x.t("cost","method");
x.t("cost","properties");
x.t("cost","caller");
x.t("cost","instance");
x.t("cost","multiple");
x.t("cost","none");
x.t("cost","expiration");
x.t("cost","effective");
x.t("cost","merely");
x.t("cost","row");
x.t("cost","important");
x.t("cost","core");
x.t("cost","specific");
x.t("cost","data");
x.t("cost","costs");
x.t("cost","entity");
x.t("cost","even");
x.t("cost","object");
x.t("guidewire_selectall","var");
x.t("function","guidewire_selectall");
x.t("adjacent","effective");
x.t("merely","finds");
x.t("implements","logic");
x.t("implements","copy");
x.t("may","helpful");
x.t("whether","existing");
x.t("getpopulatedcost","implements");
x.t("getpopulatedcost","(mypolicyline)");
x.t("getpopulatedcost","following");
x.t("different","effective");
x.t("row","modify");
x.t("implementing","rating");
x.t("things","merge");
x.t("returned","cost");
x.t("match","cost");
x.t("earliest","effective");
x.t("section","calls");
x.t("internal","method");
x.t("populates","entity");
x.t("isbasisscalablecostequal","getting");
x.t("simply","reference");
x.t("important","remember");
x.t("code","warning");
x.t("reference","corresponding");
x.t("abstract","rating");
x.t("override","debugging");
x.t("override","versioned");
x.t("term","amounts");
x.t("slightly","looser");
x.t("ids","costs");
x.t("merging","basis-scalable");
x.t("merging","costs");
x.t("together","basis");
x.t("together","mergeifcostequal");
x.t("together","mergeasbasisscalableifcostequal");
x.t("occurred","messsage");
x.t("architecture","guidewire");
x.t("existing","choice");
x.t("existing","cost");
x.t("null","example");
x.t("null","note");
x.t("mergeifcostequal","method");
x.t("mergeifcostequal","handles");
x.t("amount","properties");
x.t("instances","cost");
x.t("recommendation","abstractratingengine");
x.t("core","properties");
x.t("core","rate/amount/basis");
x.t("core","cost");
x.t("discards","later");
x.t("mergeasbasisscalableifcostequal","method");
x.t("similar","mergeifcostequal");
x.t("value","new");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("several","related");
x.t("several","possibly");
x.t("specific","thing");
x.t("rates","term");
x.t("versioned","costs");
x.t("(mypolicyline)","finally");
x.t("(mypolicyline)","cases");
x.t("actually","create");
x.t("takes","policyline");
x.t("represent","cost");
x.t("page","error");
x.t("purposes","apis");
x.t("along","few");
x.t("data","apis");
x.t("data","objects");
x.t("data","override");
x.t("data","appropriate");
x.t("data","class");
x.t("data","object");
x.t("inherits","built-in");
x.t("internally","method");
x.t("defined","isbasisscalablecostequal");
x.t("appropriate","effective");
x.t("case","need");
x.t("looser","defined");
x.t("choose","rating");
x.t("called","getpopulatedcost");
x.t("two","rate-scalable");
x.t("two","basis-scalable");
x.t("two","cost");
x.t("two","costs");
x.t("date","later");
x.t("date","among");
x.t("date","cost");
x.t("note","unlike");
x.t("note","internally");
x.t("debug","string");
x.t("debug","purposes");
x.t("optionally","creating");
x.t("cases","want");
x.t("copy","non-core");
x.t("call","every");
x.t("call","apis");
x.t("call","cost");
x.t("call","function");
x.t("call","following");
x.t("costs","equal");
x.t("costs","however");
x.t("costs","requires");
x.t("costs","basis");
x.t("costs","match");
x.t("costs","represent");
x.t("costs","merge");
x.t("merge","two");
x.t("getexistingcost","method");
x.t("getexistingcost","(mypolicyline)");
x.t("entirely","new");
x.t("following","calls");
x.t("following","api");
x.t("entity","instance");
x.t("entity","always");
x.t("entity","new");
x.t("entity","cloned");
x.t("entity","instances");
x.t("entity","core");
x.t("corresponding","cost");
x.t("class","built-in");
x.t("class","implements");
x.t("class","inherits");
x.t("warning","call");
x.t("containing","core");
x.t("abstractratingengine","calls");
x.t("returns","new");
x.t("returns","true");
x.t("returns","null");
x.t("returns","existing");
x.t("adding","together");
x.t("criteria","equality");
x.t("outcomes","getorcreatecost");
x.t("modify","apis");
x.t("modify","effective");
x.t("modify","override");
x.t("modify","existing");
x.t("policyline","search");
x.t("var","getorcreatecost");
x.t("var","text_val=eval");
x.t("var","getpopulatedcost");
x.t("var","getexistingcost");
x.t("generates","debug");
x.t("equality","slightly");
x.t("even","dates");
x.t("object","example");
x.t("object","method");
x.t("object","creates");
x.t("object","no");
x.t("object","effective");
x.t("object","cost");
x.t("object","simply");
x.t("object","several");
x.t("object","note");
x.t("object","entirely");
x.t("matching","cost");
}
